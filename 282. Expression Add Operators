This problem has a lot of edge cases to be considered:
overflow: we use a long type once it is larger than Integer.MAX_VALUE or minimum, we get over it.
0 sequence: because we can't have numbers with multiple digits started with zero, we have to deal with it too.
a little trick is that we should save the value that is to be multiplied in the next recursion.

class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> list = new ArrayList<>();
        if(num == null || num.length() == 0) {
            return list;
        }
        helper(list, "", num, target, 0, 0, 0);
        return list;
    }
    
    public void helper(List<String> list, String path, String num, int target, int index, long res, long multied) {
        if(index == num.length()) {
            if(res == target) {
                list.add(path);
            }
            return;
        }
        for(int i = index; i < num.length(); i++) {
            if(i != index && num.charAt(index) == '0') {
                break;
            }
            long temp = Long.valueOf(num.substring(index, i + 1));
            if(index == 0) {
                helper(list, path + temp, num, target, i + 1, res + temp, temp);
            }
            else{
                helper(list, path + "+" + temp, num, target, i + 1, res + temp, temp);
                helper(list, path + "-" + temp, num, target, i + 1, res - temp, -temp);
                helper(list, path + "*" + temp, num, target, i + 1, res - multied + temp * multied, temp * multied);
                //for example, if you have a sequence of 12345 and you have proceeded to 1 + 2 + 3, now your eval is 6 right? 
                //If you want to add a * between 3 and 4, you would take 3 as the digit to be multiplied, so you want to take it out 
                //from the existing eval. You have 1 + 2 + 3 * 4 and the eval now is (1 + 2 + 3) - 3 + (3 * 4).
            }
        }
    }
}
