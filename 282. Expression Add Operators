public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> list = new ArrayList<>();
        helper(list, num, target, new StringBuilder(), 0, 0, 0);
        return list;
    }
    public void helper(List<String> list, String num, int target, StringBuilder sb, int index, long val, long last){
        if(index == num.length()){
            if(target == val) {list.add(sb.toString());}
            return;
        }
        for(int i = index; i < num.length(); i++){
            if(i != index && num.charAt(index) == '0') break;
            long temp = Long.valueOf(num.substring(index, i+1));
            int len = sb.length();
            if(index == 0){
                helper(list, num, target, sb.append(temp), i + 1, val + temp, temp);
                sb.setLength(len);
            }
            else{
                helper(list, num, target, sb.append("+").append(temp), i + 1, val + temp, temp);
                sb.setLength(len);
                helper(list, num, target, sb.append("-").append(temp), i + 1, val - temp, -temp);
                sb.setLength(len);
                helper(list, num, target, sb.append("*").append(temp), i + 1, val - last + last * temp, last * temp);
                sb.setLength(len);
            }
        }
    }
}
T(n) = 3 * T(n-1) + 3 * T(n-2) + 3 * T(n-3) + ... + 3 *T(1);
T(n-1) = 3 * T(n-2) + 3 * T(n-3) + ... 3 * T(1);
Thus T(n) = 4T(n-1);

public class Solution {
    public int addOperators(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        return helper(nums, new StringBuilder(), 0, 0);
    }
    
    private int helper(int[] nums, StringBuilder path, int pos, long val) {
        if (pos == nums.length) {//val:total val we has added before curr recursion, mul:total consecutive product before
            if (val == 0) {
                return 1;
            }
            return 0;
        }
        StringBuilder num = new StringBuilder();//initialize it to ""
        int total = 0;
        for (int i = pos; i < nums.length; i++) {
            if (i != pos && nums[pos] == 0) {//if i isn't on the first char(pos) and the first char(pos) is a '0'
                break;
            }
            num.append(String.valueOf(nums[i]));//connect two nums
            long curr = Long.valueOf(num.toString());//remember to add toString() !!!
            int len = path.length();//save the length of needed part of stringbuilder
            if (pos == 0) {//if it's the first num of path, just add it to path, no operations needed
                total += helper(nums, path.append(curr), i + 1, val + curr);
                path.setLength(len);//stringbuilder is different from string,it changes itself before passed as a parameter
            } else {//therefore, we need to change it back after passing it to the helper (kind of like backtracking)
                total += helper(nums, path.append("+").append(curr), i + 1, val + curr);
                path.setLength(len);
                total += helper(nums, path.append("-").append(curr), i + 1, val - curr);
                path.setLength(len);
            }
        }
        return total;
    }
}
