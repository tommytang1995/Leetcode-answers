public class Solution {
    int count = 0;
    
    public int countArrangement(int N) {
        if (N == 0) return 0;
        helper(N, 1, new int[N + 1]);
        return count;
    }
    
    private void helper(int N, int pos, int[] used) {
        if (pos > N) {
            count++;
            return;
        }
        
        for (int i = 1; i <= N; i++) {
            if (used[i] == 0 && (i % pos == 0 || pos % i == 0)) {
                used[i] = 1;
                helper(N, pos + 1, used);
                used[i] = 0;
            }
        }
    }
}

-------------------------------------------------------------------------------------
   public int countArrangement(int N) {
    	return backtrack(new boolean[N], 0);
    }
    
    public int backtrack(boolean[] used, int curIndex) {
        if (curIndex == used.length) return 1;
        int sum = 0;
        for (int i=0;i<used.length;i++) {
            if (!used[i] && ((i+1) % (curIndex+1) == 0 || (curIndex + 1) % (i+1) == 0)) {
                used[i] = true;
                sum += backtrack(used, curIndex + 1);
                used[i] = false;
            }
        }
        return sum;
    }
