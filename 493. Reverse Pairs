class Solution {
    int[] helper;
    public int reversePairs(int[] nums) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        this.helper = new int[nums.length];
        return mergeSort(nums, 0, nums.length - 1);
    }
    
    public int mergeSort(int[] nums, int start, int end) {
        if(start >= end) {
            return 0;
        }
        int count = 0;
        int mid = start + (end - start) / 2;
        count += mergeSort(nums, start, mid) + mergeSort(nums, mid + 1, end);
        for(int i = start, j = mid + 1; i <= mid; i++) {
            while(j <= end && nums[i] / 2.0 > nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }
        myMerge(nums, start, mid, end);
        return count;
    }
    
    public void myMerge(int[] nums, int start, int mid, int end) {
        for(int i = start; i <= end; i++) {
            helper[i] = nums[i];
        }
        int p1 = start;
        int p2 = mid + 1;
        int p = start;
        while(p1 <= mid || p2 <= end) {
            if(p1 > mid || (p2 <= end && helper[p1] >= helper[p2])) {
                nums[p++] = helper[p2++];
            }
            else {
                nums[p++] = helper[p1++];
            }
        }
    }
}
