public class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while(start < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] < nums[mid+1]){ //You don't have to ensure that mid + 1 is beyond the length of nums because only when mid is 
                                         //the last element of nums this can happen. However, at that time, left is equal to right and the
                                         //loop will stop.
                start = mid + 1;
            }
            else{
                end = mid;
            }
        }
        return start;
    }
}
Time: o(logn)
public class Solution {
    public int findPeakElement(int[] nums) {
        for(int i = 1; i < nums.length; i++){
            if(nums[i] < nums[i-1]){
                return i-1;
            }
        }
        return nums.length-1;
    }
}
Time: o(n)

public class Solution {
    public int findPeakElement(int[] nums) {
        for(int i = 0; i < nums.length - 1; i++) {
            if(nums[i] > nums[i + 1]) {
                return i;
            }
        }
        return nums.length - 1;
    }
}
