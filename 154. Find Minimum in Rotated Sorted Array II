public class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length - 1;
        while(start < end){
            int mid = start + (end - start) / 2;
            if(nums[mid] < nums[end]){
                end = mid;
            }
            else if(nums[mid] > nums[end]){
                start = mid + 1;
            }
            else{    //如果中间的跟最后的相等
                if(nums[mid] == nums[start]){    //如果跟最前的也相等，这时候我们只能确定最小值在这个区间内，所以缩小区间。   e.g. 1101
                    start++;
                    end--;
                }
                else{     //如果跟最前的不相等：如果nums[mid]>nums[start]只能说明这是一个没有rotated过的sub数组，e.g. 0111
                        //                    如果nums[mid]<nums[start]那么最小值在左边. e.g. 90111
                    if(nums[mid] > nums[start]){
                        return nums[start];
                    }
                    else{
                        end = mid;
                    }
                }
            }
        }
        return nums[start];
    }
}

Time: worst: o(n) average: o(logn)
Space: o(1)

public class Solution {
    public int findMin(int[] nums) {
        int m = nums[0];
        for(int i = 1; i < nums.length; i++){
            if(nums[i] < m){
                m = nums[i];
            }
        }
        return m;
    }
}
Time: o(n)
Space: o(1)
