public class Solution {
    public String reverseStr(String s, int k) {
        int count = 0;
        char[] chars = s.toCharArray();
        if(s.length() < k) return reverse(chars, 0, chars.length - 1);
        else if(s.length() < 2 * k) return reverse(chars, 0, k - 1);
        for(int i = 0; i < chars.length; i++){
            count++;
            if(count == 2 * k){
                chars = reverse(chars, i + 1 - 2 * k, i - k).toCharArray();
                count = 0;
            }
        }
        if(count != 0){
            if(count < k) return reverse(chars, chars.length - count, chars.length - 1);
            else return reverse(chars, chars.length - count, chars.length - count + k - 1);
        }
        return new String(chars);
    }
    
    public String reverse(char[] array, int start, int end){
        while(start < end){
            char temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            start++;
            end--;
        }
        return new String(array);
    }
}

public class Solution {
    public String reverseStr(String s, int k) {
        char[] chars = s.toCharArray();
        for(int i = 0; i < chars.length; i += 2 * k){
            int j = Math.min(i + k - 1, chars.length - 1);
            reverse(chars, i, j);
        }
        return new String(chars);
    }
    
    public void reverse(char[] array, int start, int end){
        while(start < end){
            char temp = array[start];
            array[start] = array[end];
            array[end] = temp;
            start++;
            end--;
        }
    }
}
