class NumArray {

    class SegmentTreeNode {
        int start;
        int end;
        SegmentTreeNode left;
        SegmentTreeNode right;
        int sum;
        
        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
            this.left = null;
            this.right = null;
            this.sum = 0;
        }
    }
    
    SegmentTreeNode root = null;
    
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length - 1);
    }
    
    public SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if(start > end) {
            return null;
        }
        else {
            SegmentTreeNode root = new SegmentTreeNode(start, end);
            if(start == end) {
                root.sum = nums[start];
            }
            else {
                int mid = start + (end - start) / 2;
                root.left = buildTree(nums, start, mid);
                root.right = buildTree(nums, mid + 1, end);
                root.sum = root.left.sum + root.right.sum;
            }
            return root;
        }
    }
    
    public void update(int i, int val) {
        update(root, i, val);
    }
    
    public void update(SegmentTreeNode root, int i, int val) {
        if(root.start == root.end) {
            root.sum = val;
        }
        else {
            int mid = root.start + (root.end - root.start) / 2;
            if(i <= mid) {
                update(root.left, i, val);
            }
            else {
                update(root.right, i, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }
    
    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
    public int sumRange(SegmentTreeNode root, int i, int j) {
        if(root.start == i && root.end == j) {
            return root.sum;
        }
        else {
            int mid = root.start + (root.end - root.start) / 2;
            if(j <= mid) {
                return sumRange(root.left, i, j);
            }
            else if(i >= mid + 1){
                return sumRange(root.right, i, j);
            }
            else {
                return sumRange(root.left, i, mid) + sumRange(root.right, mid + 1, j);
            }
        }
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
