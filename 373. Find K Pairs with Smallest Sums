public class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> list = new ArrayList<>();
         if(nums1==null||nums2==null||nums1.length==0||nums2.length==0||k<=0)return list;
        PriorityQueue<Tuple> pq = new PriorityQueue<>();
        for(int i = 0; i < nums1.length; i++){
            pq.offer(new Tuple(i,0,nums1[i]+nums2[0]));
        }
        for(int i = 0; i < Math.min(k, nums1.length*nums2.length); i++){
            Tuple temp = pq.poll();
            list.add(new int[]{nums1[temp.x],nums2[temp.y]});
            if(temp.y == nums2.length-1) continue;
            pq.offer(new Tuple(temp.x,temp.y+1,nums1[temp.x]+nums2[temp.y+1]));
        }
        return list;
    }
}
class Tuple implements Comparable<Tuple>{
    int x;
    int y;
    int sum;
    public Tuple(int x, int y, int sum){
        this.x = x;
        this.y = y;
        this.sum = sum;
    }
    @Override
    public int compareTo(Tuple tuple){
        return this.sum - tuple.sum;
    }   
}
Time: o(klogk)
Space: o(k)
