public class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        if(strs.length==0)return new ArrayList<>();
        HashMap<String,List<String>> map = new HashMap<>();
        for(String s : strs){
            char[] ss = s.toCharArray();
            Arrays.sort(ss);
            String sss = String.valueOf(ss);
            if(!map.containsKey(sss)){
                map.put(sss,new ArrayList<>());
            }
            map.get(sss).add(s);
        }
        for(String key : map.keySet()){
            Collections.sort(map.get(key));
        }
        return new ArrayList<>(map.values());
    }
}
Time: o(mnlogn) sort:o(nlogn)
Space: o(m)

public class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, ArrayList<String>> map = new HashMap<>();
        List<List<String>> list = new ArrayList<>();
        for(String str : strs){
            int[] letter = new int[26];
            for(int i = 0; i < str.length(); i++){
                letter[str.charAt(i) - 'a']++;
            }
            String combine = "";
            for(int i = 0; i < 26; i++){
                if(letter[i] != 0){
                    combine += String.valueOf(letter[i]) + String.valueOf((char)('a' + i));
                }
            }
            if(!map.containsKey(combine)){
                map.put(combine, new ArrayList<>());
            }
            map.get(combine).add(str);
        }
        for(Map.Entry<String, ArrayList<String>> entry : map.entrySet()){
            list.add(entry.getValue());
        }
        return list;
    }
}
Time: o(mn)
Space: o(m)
