public class Solution {
    public boolean search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                return true;
            }
            if(nums[mid] > nums[left]){
                if(nums[left] <= target && target < nums[mid]){
                    right = mid - 1;
                }
                else{
                    left = mid + 1;
                }
            }
            else if(nums[mid] < nums[left]){
                if(nums[mid] < target && target <= nums[right]){
                    left = mid + 1;
                }
                else{
                    right = mid - 1;
                }
            }
            else{
                left++;   //若nums[mid]==nums[left]，有两种情况，一种是left到right之间都是一样的数，另一种是存在不一样的数。我们不能确定。
                          //所以必须一个个试。例如111115，变成了1151111，第一个1与第三个1虽然相等，但是中间有5.
            }
        }
        return false;
    }
}

Time: o(n)  最坏是在11111111115中找5这种情况。

public class Solution {
    public boolean search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return false;
        }
        int left = 0;
        int right = nums.length - 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(nums[mid] == target){
                return true;
            }
            if(nums[mid] < nums[right]){
                if(target > nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }
                else{
                    right = mid;
                }
            }
            else if(nums[mid] > nums[right]){
                if(target >= nums[left] && target < nums[mid]){
                    right = mid;
                }
                else{
                    left = mid + 1;
                }
            }
            else{
                right--;
            }
        }
        return nums[left] == target;
    }
}
