
public class Solution {
    public int integerReplacement(int n) {
        int res = 0;
        if(n == 0) return 0;
        if(n == 1) return 0;
        if(n == Integer.MAX_VALUE) return 32;
            if(n % 2 == 0){
                res += 1 + integerReplacement(n / 2);
            } else {
                res += 1 + Math.min(integerReplacement(n + 1), integerReplacement(n - 1));
            }
        return res;
    }
}

public class Solution {
    public int integerReplacement(int n) {
        if(n == Integer.MAX_VALUE) return 32;
        int count = 0;
        while(n != 1){
            if(n % 2 == 0){
                n /= 2;
            }
            else if((n + 1) % 4 == 0 && n != 3){
                ++n;
            }
            else{
                --n;
            }
            count++;
        }
        return count;
    }
}
//When n is even, the operation is fixed. The procedure is unknown when it is odd. When n is odd it can be written into the form n = 2k+1 
//(k is a non-negative integer.). That is, n+1 = 2k+2 and n-1 = 2k. Then, (n+1)/2 = k+1 and (n-1)/2 = k. So one of (n+1)/2 and (n-1)/2 is 
//even, the other is odd. And the "best" case of this problem is to divide as much as possible. Because of that, always pick n+1 or n-1 
//based on if it can be divided by 4. The only special case of that is when n=3 you would like to pick n-1 rather than n+1.

public class Solution {
    public int integerReplacement(int n) {
        if(n == Integer.MAX_VALUE) return 32;
        int count = 0;
        while(n != 1){
            if(n % 2 == 0){
                n /= 2;
            }
            else if(n == 3 || ((n >>> 1) & 1) == 0){
                --n;
            }
            else{
                ++n;
            }
            count++;
        }
        return count;
    }
}
It is enough to examine the last two digits to figure out whether incrementing or decrementing will give more 1's. Indeed, if a number 
ends with 01, then certainly decrementing is the way to go. Otherwise, if it ends with 11, then certainly incrementing is at least as 
good as decrementing (*011 -> *010 / *100) or even better (if there are three or more 1's). 
