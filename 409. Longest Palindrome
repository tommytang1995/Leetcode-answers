public class Solution {
    public int longestPalindrome(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int len = 0;
        for(int i = 0 ; i < s.length() ; i++){
            if(!map.containsKey(s.charAt(i))){
                map.put(s.charAt(i),1);
            }
            else{
                map.put(s.charAt(i),map.get(s.charAt(i))+1);
            }
        }
        
        for(Character key : map.keySet()){
            int num = map.get(key);
            len += num-num%2;
        }
        
        return len==s.length()?len:len+1;
    }
}


public class Solution {
    public int longestPalindrome(String s) {
        HashSet<Character> set = new HashSet<>();
        int len = 0;
        for(int i = 0 ; i < s.length() ; i++){
            if(set.contains(s.charAt(i))){
                set.remove(s.charAt(i));
                len++;
            }
            else{
                set.add(s.charAt(i));
            }
        }
        
        return 2*len==s.length()?2*len:2*len+1;
    }
}
