public class Solution {
    public String removeKdigits(String num, int k) {
        if(k==num.length())return "0";
        Stack<Character> stack = new Stack<>();
        int i = 0;
        while(i<num.length()){
            while(k>0&&!stack.isEmpty()&&stack.peek()>num.charAt(i)){  //要确保高位的digit越小越好，这样才能保证最小。最极端的例子：5432和2345.
                stack.pop();
                k--;
            }
            stack.push(num.charAt(i));
            i++;
        }
        
        //从小到大排好序的或者所有元素都相等的情况
        while(k>0){
            stack.pop();
            k--;
        }
        //
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        while(sb.length() > 1 && sb.charAt(sb.length()-1) == '0'){
            sb.deleteCharAt(sb.length()-1);
        }
        return sb.reverse().toString();
    }
}
Time: o(n)
Space: o(n)
