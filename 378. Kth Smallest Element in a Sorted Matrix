public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(
         new Comparator<int[]>(){
              @Override
              public int compare(int[] a, int[] b){
                  return matrix[a[0]][a[1]] - matrix[b[0]][b[1]];
              }
          }
        );
        for(int i = 0; i < matrix.length; i++){
            int[] temp = {0, i};
            pq.offer(temp);
        }
        for(int i = 0; i < k - 1; i++){
            int[] temp = pq.poll();
            if(temp[0] == matrix.length - 1) continue;
            pq.offer(new int[]{temp[0] + 1, temp[1]});
        }
        int[] temp = pq.poll();
        return matrix[temp[0]][temp[1]];
    }
}
Time: o(n+klogn)
Space: o(n^2)

public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int start = matrix[0][0];
        int end = matrix[matrix.length - 1][matrix.length - 1] + 1;
        while(start < end){
            int mid = start + (end - start) / 2;
            int count = 0;
            int j = matrix[0].length - 1;
            for(int i = 0; i < matrix.length; i++){
                while(j >= 0 && matrix[i][j] > mid) j--;
                count += j + 1;
            }
            if(count < k) start = mid + 1;
            else end = mid;
        }
        return start;
    }
}
Time: o(nlogn)
Space: o(1)
