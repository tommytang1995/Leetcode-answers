public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        if(n == 0) return list;
        helper(list,"",0,0,n);
        return list;
    }
    
    public void helper(List<String> list, String str, int left, int right, int n){
        if(left > n || right > n) return;
        if(right > left) return;
        if(left == n && right == n){
            list.add(str);
            return;
        }
        helper(list, str + "(", left + 1, right, n);
        helper(list, str + ")", left, right + 1, n);
    }
}
Time: o(2^n)
Space: o(n)

public class Solution {
    public List<String> generateParenthesis(int n) {
     List<String> res = new ArrayList<>();
     Stack<String> stack = new Stack<>();
     Stack<Integer> rightNumber = new Stack<>();   //keep the number of ")"
     stack.push("(");
     rightNumber.push(0);
     while(!stack.isEmpty()){
         String cur = stack.pop();
         int right = rightNumber.pop();
         if(cur.length() - right < n){
             stack.push(cur + "(");
             rightNumber.push(right);
         }
         if(2 * right < cur.length()){
             stack.push(cur + ")");
             rightNumber.push(right+1);
         }
         if(cur.length() == 2 * n){
             res.add(cur);
         }
     }
     return res;
   }
}
Time: o(2^n)
Space: o(n)

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        helper(list, new StringBuilder(), n, 0, 0);
        return list;
    }
    
    public void helper(List<String> list, StringBuilder sb, int n, int left, int right){
        if(left > n || right > left){
            return;
        }
        if(left == n && left == right){
            list.add(sb.toString());
            return;
        }
        if(left < n){
            int len = sb.length();
            sb.append("(");
            helper(list, sb, n, left + 1, right);
            sb.setLength(len);
        }
        if(right < left){
            int len = sb.length();
            sb.append(")");
            helper(list, sb, n, left, right + 1);
            sb.setLength(len);
        }
    }
}
