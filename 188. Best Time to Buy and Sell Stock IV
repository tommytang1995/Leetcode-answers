public class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices == null || prices.length < 2) return 0;
        int n = prices.length;
        if(k >= n / 2){
            int res = 0;
            for(int i = 1; i < prices.length; i++){
                if(prices[i] > prices[i-1]) res += prices[i] - prices[i-1];
            }
            return res;
        }
        int[][] dp = new int[k+1][n];
        for(int i = 1; i <= k; i++){
            int tmpMax = -prices[0];
            for(int j = 1; j < n; j++){
                dp[i][j] = Math.max(dp[i][j-1], tmpMax + prices[j]);
                tmpMax = Math.max(tmpMax, dp[i-1][j-1] - prices[j]);
            }
        }
        return dp[k][n-1];
    }
}
