public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || q == null || p == null) return null;
        if(root.val > p.val && root.val > q.val) return lowestCommonAncestor(root.left, p, q);
        else if(root.val < p.val && root.val < q.val) return lowestCommonAncestor(root.right, p, q);
        else return root;
    }
}利用BST的特性：左subtree的所有值<root的值<右subtree的所有值。若root>左且>右，说明真正的root应该在左subtree（小一些）。反之，在右subtree。
Time: o(n)
Space: o(logn)
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while(true){
            if(root == null || p == null || q == null) return null;
            if(root.val > q.val && root.val > p.val) root = root.left;
            else if(root.val < q.val && root.val < p.val) root = root.right;
            else return root;
        }
    }
}
Time: o(n)
Space: o(1)

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null) return null;
        if(p == null || q == null) return p == null ? q : p;
        if(root.val == p.val || root.val == q.val) return root;
        if((p.val < root.val && q.val > root.val) || (p.val > root.val && q.val < root.val)) return root;
        if(p.val < root.val) return lowestCommonAncestor(root.left, p, q);
        else return lowestCommonAncestor(root.right, p, q);
    }
}
