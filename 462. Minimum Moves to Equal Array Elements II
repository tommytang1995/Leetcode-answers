public class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int count = 0;
        int i = 0;
        int j = nums.length - 1;
        while(i < j){
            count += nums[j] - nums[i];
            i++;
            j--;
        }
        return count;
    }
}

Suppose you have two endpoints A and B, when you want to find a point C that has minimum sum of distance between AC and BC, the point C will always between A and B. Draw a graph and you will understand it. Lets keep moving forward. After we locating the point C between A and B, we can define that
dis(AC) = c - a; dis(CB) = b - c;
sum = dis(AC) + dis(CB) = b - a.
b - a will be a constant value, given specific b and a. Thus there will be no difference between points among A and B.

In this problem, we set two boundaries, saying i and j, and we move the i and j to do the computation.

Hope it helps.

/*
Intuitive solution might be making all the numbers the same as average.
However that does not always work 
[1,0,0,8,6]. average is 3, the total cost of making every number 3 is 16
However if we were to make every number 1, cost is 14.

Make every number the medium, instead of average would generate the smallest cost
*/

public class Solution {
    public int minMoves2(int[] nums) {
        int sum = 0;
        Arrays.sort(nums);
        int medium = nums[nums.length / 2];
        for(int n : nums) sum += Math.abs(n - medium);
        return sum;
    }
}````
