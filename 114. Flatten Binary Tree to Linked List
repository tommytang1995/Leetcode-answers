/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 重点是要找到左子树的最右边的点，然后把右子树整个接到这个点的右边，最后再把左子树放到根节点的右边，根节点的左边设为null
public class Solution {
    public void flatten(TreeNode root) {
        TreeNode cur = root;
        while(cur != null){
            if(cur.left != null){
                TreeNode temp = cur.left;
                while(temp.right != null) temp = temp.right;
                temp.right = cur.right;
                cur.right = cur.left;
                cur.left = null;
            }
            cur = cur.right;
        }
    }
}
Time: o(n)
Space: o(1)

重点是递归dfs，先把左子树放到根节点的右边，再找这颗子树的最右点，找到后把根节点的右子树接到这个点上。
public class Solution {
    public void flatten(TreeNode root) {
        if(root == null) return;
        TreeNode left = root.left;
        TreeNode right = root.right;
        flatten(root.left);
        flatten(root.right);
        root.right = left;
        root.left = null;
        TreeNode cur = root;
        while(root.right != null) root = root.right;
        root.right = right;
    }
}
Time: o(n)
Space: o(logn)
