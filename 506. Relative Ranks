public class Solution {
    public String[] findRelativeRanks(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], i);
        }
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(
            new Comparator<Map.Entry<Integer, Integer>>(){
                @Override
                public int compare(Map.Entry<Integer, Integer> a, Map.Entry<Integer, Integer> b){
                    return b.getKey() - a.getKey();
                }
            }
        );
        pq.addAll(map.entrySet());
        int count = 0;
        String[] res = new String[nums.length];
        while(pq.size() != 0){
            Map.Entry<Integer, Integer> entry = pq.poll();
            count++;
            if(count == 1){
                res[entry.getValue()] = "Gold Medal";
            }
            else if(count == 2){
                res[entry.getValue()] = "Silver Medal";
            }
            else if(count == 3){
                res[entry.getValue()] = "Bronze Medal";
            }
            else{
                res[entry.getValue()] = count + "";
            }
        }
        return res;
    }
}

public class Solution {
    public String[] findRelativeRanks(int[] nums) {
        Integer[] index = new Integer[nums.length];  //Integer!!!!Not Int!!!!!
        for(int i = 0; i < nums.length; i++){
            index[i] = i;
        }
        Arrays.sort(index, new Comparator<Integer>(){
            @Override
            public int compare(Integer a, Integer b){
                return nums[b] - nums[a];
            }
        });
        String[] res = new String[nums.length];
        for(int i = 0; i < index.length; i++){
            if(i == 0){
                res[index[i]] = "Gold Medal";
            }
            else if(i == 1){
                res[index[i]] = "Silver Medal";
            }
            else if(i == 2){
                res[index[i]] = "Bronze Medal";
            }
            else{
                res[index[i]] = i + 1 + "";
            }
        }
        return res;
    }
}
