/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null)return false;
        if(root.left==null&&root.right==null)return sum==root.val;
        return hasPathSum(root.left,sum-root.val)||hasPathSum(root.right,sum-root.val);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null)return false;
        Queue<TreeNode> queue1 = new LinkedList<>();
        Queue<Integer> queue2 = new LinkedList<>();
        queue1.offer(root);
        queue2.offer(sum);
        while(!queue1.isEmpty()){
            TreeNode temp = queue1.poll();
            int value = queue2.poll();
            if(temp.left==null&&temp.right==null&&temp.val==value){
                return true;
            }
            if(temp.left!=null){
                queue1.offer(temp.left);
                queue2.offer(value-temp.val);
            }
            if(temp.right!=null){
                queue1.offer(temp.right);
                queue2.offer(value-temp.val);
            }
        }
        return false;
    }
}
