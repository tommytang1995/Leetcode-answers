/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 recursion，只有两种情况：
 1. 这个node要被偷，然后下一步只能偷node.left.left, node.left.right, node.right.left, node.right.right，结果是两步之和。
 2. 这个node不被偷，然后下一步只能偷node.left和node.right，结果是这一步的两个值之和。
 最后取这两种情况的最大值。
public int rob(TreeNode root) {
    if (root == null) {
        return 0;
    }
    
    int val = 0;
    
    if (root.left != null) {
        val += rob(root.left.left) + rob(root.left.right);
    }
    
    if (root.right != null) {
        val += rob(root.right.left) + rob(root.right.right);
    }
    
    return Math.max(val + root.val, rob(root.left) + rob(root.right));
}

用hashmap存储每一个node下的最大值，这样可以避免重复计算。很多recursion的问题都可以用hashmap来存储这一步之前的值，以快速提高效率。见241题。
public class Solution {
    public int rob(TreeNode root) {
        Map<TreeNode, Integer> map = new HashMap<>();
        return helper(root,map);
    }
    
    public int helper(TreeNode root, Map<TreeNode, Integer> map) {
        if(root==null)return 0;
        
        if(map.containsKey(root))return map.get(root);
        
        int val = 0;
        
        if(root.left!=null){
            val += helper(root.left.left, map)+helper(root.left.right, map);
        }
        
        if(root.right!=null){
            val += helper(root.right.left, map)+helper(root.right.right, map);
        }
        
        val = Math.max(val+root.val,(helper(root.left, map)+helper(root.right, map)));
        
        map.put(root, val);
        
        return val;
    }
}
