public class Solution {
    public int search(int[] nums, int target) {
        int start = 0 ;
        int end = nums.length-1;
        while(start<end){
            int mid = (start+end)/2;
            if(nums[mid]==target){
                return mid;
            }
            if(nums[mid]>=nums[start]){
                if(target>=nums[start]&&target<nums[mid]){
                    end=mid;
                }
                else{
                    start=mid+1;
                }
            }
            else{
                if(target>nums[mid]&&target<=nums[end]){
                    start=mid+1;
                }
                else{
                    end=mid;
                }
            }
        }
        return nums[start]==target?start:-1;
    }
}
__________________________________________________________________________________________
public class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0){
            return -1;
        }
        int minIndex = findMin(nums);
        if(nums[minIndex] == target){
            return minIndex;
        }
        int left = 0;
        int right = nums.length - 1;
        while(left <= right){
            int mid = left + (right - left) / 2;
            int realMid = (mid + minIndex) % nums.length;  //find the real midpoint of the original array
            if(nums[realMid] == target){
                return realMid;
            }
            else if(nums[realMid] < target){
                left = mid + 1;
            }
            else{
                right = mid - 1;
            }
        }
        return -1;
    }
    
    public int findMin(int[] nums){
        int left = 0;
        int right = nums.length - 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            if(nums[mid] > nums[right]){
                left = mid + 1;
            }
            else{
                right = mid;
            }
        }
        return left;
    }
}
