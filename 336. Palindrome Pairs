class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for(int i = 0; i < words.length; i++) {
            for(int j = 0; j <= words[i].length(); j++) {
                String str1 = words[i].substring(0, j);
                String str2 = words[i].substring(j);
                if(isPalinDrome(str1)) {
                    String str2Reversed = new StringBuilder(str2).reverse().toString();
                    if(map.getOrDefault(str2Reversed, i) != i) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(map.get(str2Reversed));
                        temp.add(i);
                        res.add(temp);
                    }
                }
                if(isPalinDrome(str2) && str2.length() != 0) {
                    String str1Reversed = new StringBuilder(str1).reverse().toString();
                    if(map.getOrDefault(str1Reversed, i) != i) {
                        List<Integer> temp = new ArrayList<>();
                        temp.add(i);  //注意这两个的顺序与之前的不一样
                        temp.add(map.get(str1Reversed));
                        res.add(temp);
                    }
                }
            }
        }
        return res;
    }
    
    public boolean isPalinDrome(String str) {
        int start = 0;
        int end = str.length() - 1;
        while(start < end) {
            if(str.charAt(start) != str.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
