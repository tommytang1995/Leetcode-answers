/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null)return 0;
        int left = minDepth(root.left);
        int right = minDepth(root.right);
        return (left==0||right==0)?left+right+1:Math.min(left,right)+1;
    }
}

public class Solution {
    private int res = Integer.MAX_VALUE;
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        helper(root, 0);
        return res;
    }
    
    public void helper(TreeNode root, int count){
        if(root == null) return;
        count++;
        if(root.left == null && root.right == null){
            res = Math.min(res, count);
            return;
        }
        helper(root.left, count);
        helper(root.right, count);
    }
}

public class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> queue1 = new LinkedList<>();
        Queue<Integer> queue2 = new LinkedList<>();
        queue1.offer(root);
        queue2.offer(1);
        while(!queue1.isEmpty()){
            TreeNode node = queue1.poll();
            int count = queue2.poll();
            if(node.left != null){
                queue1.offer(node.left);
                queue2.offer(count+1);
            }
            if(node.right != null){
                queue1.offer(node.right);
                queue2.offer(count+1);
            }
            if(node.left == null && node.right == null){    //最短的路径一定最先到达叶子节点，所以可以立即返回.
                return count;
            }
        }
        return -1;
    }
}
Time: o(n)
Space: o(n)
