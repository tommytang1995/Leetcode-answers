public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(m==0||n==0)return 0;
        int[] dp = new int[n];
        dp[0]=1;

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(obstacleGrid[i][j]==1)dp[j]=0;
                else if(j>0){   //这种处理方式可以避免单独处理第一行。
                    dp[j]=dp[j]+dp[j-1];
                }
            }
        }
        return dp[n-1];
    }
}

Time: o(m*n)
Space: o(n)

public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        if(m==0||n==0)return 0;

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(obstacleGrid[i][j]==1)obstacleGrid[i][j]=0;
                else if(i==0&&j==0)obstacleGrid[i][j]=1;
                else if(i==0)obstacleGrid[i][j]=obstacleGrid[i][j-1];
                else if(j==0)obstacleGrid[i][j]=obstacleGrid[i-1][j];
                else{
                    obstacleGrid[i][j]=obstacleGrid[i-1][j]+obstacleGrid[i][j-1];
                }
            }
        }
        return obstacleGrid[m-1][n-1];
    }
}
Time: o(m*n)
Space: o(1)
