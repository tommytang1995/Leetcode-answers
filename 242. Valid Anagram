
public class Solution {
    public boolean isAnagram(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++){
            if(!map.containsKey(s.charAt(i))){
                map.put(s.charAt(i), 1);
            }
            else{
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            }
        }
        for(int i = 0; i < t.length(); i++){
            if(!map.containsKey(t.charAt(i)) || map.get(t.charAt(i)) == 0){
                return false;
            }
            map.put(t.charAt(i), map.get(t.charAt(i)) - 1);
            if(map.get(t.charAt(i)) == 0){
                map.remove(t.charAt(i));
            }
        }
        return map.size() == 0;
    }
}
Time: o(m+n)
Space: o(m)

public class Solution {
    public boolean isAnagram(String s, String t) {
        int[] alphabets = new int[26];
        for(int i = 0; i < s.length(); i++){
            alphabets[s.charAt(i) - 'a']++;
        }
        for(int i = 0; i < t.length(); i++){
            if(alphabets[t.charAt(i) - 'a'] == 0){
                return false;
            }
            alphabets[t.charAt(i) - 'a']--;
        }
        for(int i = 0; i < 26; i++){
            if(alphabets[i] != 0){
                return false;
            }
        }
        return true;
    }
}
Time: o(m+n)
Space: o(1)
