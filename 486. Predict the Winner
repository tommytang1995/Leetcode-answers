public class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if(nums == null || nums.length == 0) return false;
        if(nums.length == 1) return true;
        if(nums.length == 2 && nums[0] > nums[1]) return true;
        return helper(nums, 0, nums.length - 1, new Integer[nums.length - 1][nums.length - 1]) >= 0;
    }
    
    public int helper(int[] nums, int start, int end, Integer[][] dp){
        if(dp[start][end] != null){
            return dp[start][end];
        }
        if(start == end){
            dp[start][end] = nums[start];
        }
        else{
            dp[start][end] = Math.max((nums[start] - helper(nums, start + 1, end, dp)), nums[end] - helper(nums, start, end - 1, dp));
        }
        return dp[start][end];
    }
}

//The goal is the sum of player1 should be larger than or equal to the one of player2. 
//Time: o(n^2)

//for player1, every time he choose nums[i], his sum will be added by nums[i]. And every time player2 choose nums[j], his sum will be substracted
//by nums[i].

public class Solution {
    public boolean PredictTheWinner(int[] nums) {
        int[][] dp = new int[nums.length][nums.length];
        for(int i = 0; i < nums.length; i++) dp[i][i] = nums[i];
        for(int i = nums.length - 1; i >= 0; i--){
            for(int j = i + 1; j < nums.length; j++){
                dp[i][j] = Math.max(nums[i] - dp[i + 1][j], nums[j] - dp[i][j - 1]);
            }
        }
        return dp[0][nums.length - 1] >= 0;
   }
}
