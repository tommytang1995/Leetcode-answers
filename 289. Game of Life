First of all, we should use 2 bit to represent the current and the future state of a cell. Say board[i][j] = 3(11), this means the cell 
will be alive in the next state. So there are such possible transitions: 01-11, 00-10. Every cell by default will be dead. So there is no 
transition like 01-00. Notice: the first bit is the second state and the second bit is the first state.

public class Solution {
    public void gameOfLife(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        if(m==0||n==0||board==null)return;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int lives = helper(board,m,n,i,j);
                if(board[i][j]==1&&(lives>=2&&lives<=3)){
                    board[i][j] = 3;   //01-11
                }
                if(board[i][j]==0&&lives==3){
                    board[i][j] = 2;  //00-10
                }
            }
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = board[i][j] >> 1;   //get the second state
            }
        }
    }
    
    public int helper(int[][] board, int m, int n, int i, int j){
        int lives = 0;
        for(int x = Math.max(i-1,0); x <= Math.min(i+1, m-1); x++){
            for(int y = Math.max(j-1,0); y <= Math.min(j+1, n-1); y++){
                lives += board[x][y] & 1;   //get the first state. We update the second state only according to other cell's first state.
            }
        }
        lives -= board[i][j] & 1;  //minus the itself
        return lives;
    }
}

Time: o(m*n)
Space: o(1)
