/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null||p==root||q==root){  
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left!=null&&right!=null){
            return root;    //it means both left and right have one of p and q.
        }
        return left!=null?left:right; //if either side is null, it means that that side does not have either p or q.
    }
}

public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Map<TreeNode, TreeNode> map = new HashMap<>();
        Stack<TreeNode> stack = new Stack<>();
        map.put(root, null);
        stack.push(root);
        while(!map.containsKey(p) || !map.containsKey(q)){
            TreeNode cur = stack.pop();
            if(cur.left != null){
                map.put(cur.left, cur);
                stack.push(cur.left);
            }
            if(cur.right != null){
                map.put(cur.right, cur);
                stack.push(cur.right);
            }
        }
        Set<TreeNode> ancestors = new HashSet<>();
        while(p != null){
            ancestors.add(p);
            p = map.get(p);
        }
        while(!ancestors.contains(q)){  //如果q正好在p的ancestors中，说明它们的共同祖先就是q，如果不在，我们找q的祖先，看这个祖先是否在ancestors中
                                        //如果这个祖先在的话，说明这个祖先就是共同的祖先。
            q = map.get(q);
        }
        return q;
    }
}
Time: o(n)
Space: o(n)
