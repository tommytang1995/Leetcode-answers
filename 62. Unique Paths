public class Solution {
    public int uniquePaths(int m, int n) {
        int dp[] = new int[n];
        dp[0] = 1;
        for(int i = 0; i < m; i++){
            for(int j = 1; j < n; j++){
                dp[j] = dp[j] + dp[j-1]; //第二个dp[j]代表该点上方的结果，dp[j-1]代表该点左方的结果。
            }
        }
        return dp[n-1];
    }
}

Time: o(m*n)
Space: o(n)

public class Solution {
    public int uniquePaths(int m, int n) {
        int[][] res = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 || j == 0){
                    res[i][j] = 1;
                    continue;
                }
                res[i][j] = res[i - 1][j] + res[i][j - 1];
            }
        }
        return res[m-1][n-1];
    }
}

Time: o(m*n)
Space: o(m*n)
