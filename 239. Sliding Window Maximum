public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] res = new int[nums.length-k+1];
        if(nums == null || nums.length == 0 || k == 0) return new int[0];
        PriorityQueue<Integer> pq = new PriorityQueue<>(
            new Comparator<Integer>(){
                @Override
                public int compare(Integer a, Integer b){
                    return b.intValue() - a.intValue();
                }
            }
        );
        for(int i = 0; i < k; i++){
            pq.offer(nums[i]);
        }
        res[0] = pq.peek();
        for(int i = k; i < nums.length; i++){
            pq.remove(nums[i-k]);
            pq.offer(nums[i]);
            res[i-k+1] = pq.peek();
        }
        return res;
    }
}
Time: o(nlogk)
Space: o(n)
