public class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] chars = new int[26];
        for(int i = 0; i < tasks.length; i++){
            chars[tasks[i] - 'A']++;
        }
        Arrays.sort(chars);
        int i = 25;
        while(i >= 0 && chars[i] == chars[25]) i--;
        return Math.max(tasks.length, (chars[25] - 1) * (n + 1) + 25 - i);
    }
}

c[25]-1: we have totally "c[25]" frames,
*(n+1): the length of each frame, each of the first c[25]-1 frames must have a length of "n+1"
+25-i: count for the most frequent letters, it is the length of the last frame

First consider the most frequent characters, we can determine their relative positions first and use them as a frame to insert the remaining less frequent characters. Here is a proof by construction:
Let F be the set of most frequent chars with frequency k.
We can create k chunks, each chunk is identical and is a string consists of chars in F in a specific fixed order.
Let the heads of these chunks to be H_i; then H_2 should be at least n chars away from H_1, and so on so forth; then we insert the less frequent chars into the gaps between these chunks sequentially one by one ordered by frequency in a decreasing order and try to fill the k-1 gaps as full or evenly as possible each time you insert a character. In summary, append the less frequent characters to the end of each chunk of the first k-1 chunks sequentially and round and round, then join the chunks and keep their heads' relative distance from each other to be at least n.
Examples:
AAAABBBEEFFGG 3
here X represents a space gap:
Frame: "AXXXAXXXAXXXA"
insert 'B': "ABXXABXXABXXA" <--- 'B' has higher frequency than the other characters, insert it first.
insert 'E': "ABEXABEXABXXA"
insert 'F': "ABEFABEXABFXA" <--- each time try to fill the k-1 gaps as full or evenly as possible.
insert 'G': "ABEFABEGABFGA"
