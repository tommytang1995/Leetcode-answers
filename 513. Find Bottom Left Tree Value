/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
  * }
 */
 public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        Integer val = null;
        while(!queue.isEmpty()){
            int size = queue.size();
            boolean first = true;
            for(int i = 0; i < size; i++){
                TreeNode temp = queue.poll();
                 if(first) {val = new Integer(temp.val); first = false;}
                if(temp.left != null) queue.offer(temp.left);
                if(temp.right != null) queue.offer(temp.right);
            }
        }
        return val.intValue();
/    }
}

 /**
.  * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
  * }
 */
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(root, list, 0);
        return list.get(list.size() - 1).get(0);
    }
    
    public void backtrack(TreeNode root, List<List<Integer>> list, int level){
        if(root == null) return;
        List<Integer> temp;
        if(level == list.size()){
            temp = new ArrayList<>();
            list.add(temp);
        }
        temp = list.get(level);
        temp.add(root.val);
        backtrack(root.left, list, level + 1);
        backtrack(root.right, list, level + 1);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int levels = 0;
    int res = 0;
    public int findBottomLeftValue(TreeNode root) {
        if(root == null) return 0;
        helper(root, 0);
        return res;
    }
    
    public void helper(TreeNode root, int level){
        if(root == null) return;
        if(level == levels){ //the first time we hit this level
            res = root.val;
            levels++;
        }
        helper(root.left, level + 1);
        helper(root.right, level + 1);
    }
}
