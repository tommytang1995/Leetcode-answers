public class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        StringBuilder sb = new StringBuilder();
        String[] words = sentence.split(" ");
        for(String word : words){
            int len = 0;
            String target = null;
            for(String root : dict){
                if(word.indexOf(root) == 0){
                    if(target == null){
                        len = root.length();
                        target = root;
                        continue;
                    }
                    if(root.length() < len){
                        len = root.length();
                        target = root;
                    }
                }
            }
            if(target != null) sb.append(target + " ");
            else sb.append(word + " ");
        }
        return sb.toString().trim();
    }
}

--------------------------------------------------------------------------------
public class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        String[] tokens = sentence.split(" ");
        Trie trie = buildTrie(dict);
        StringBuilder sb = new StringBuilder();
        for(String token : tokens){
            sb.append(helper(trie, token));
            sb.append(" ");
        }
        return sb.toString().trim();
    }
    
    public String helper(Trie trie, String token){
        StringBuilder sb = new StringBuilder();
        Trie temp = trie;
        for(char ch : token.toCharArray()){
            sb.append(ch);
            if(temp.children[ch - 'a'] != null){
                if(temp.children[ch - 'a'].isWord == true){
                    return sb.toString();
                }
                temp = temp.children[ch - 'a'];
            }
            else{
                return token;
            }
        }
        return token;
    }
    
    public Trie buildTrie(List<String> dict){
        Trie trie = new Trie(' ');
        for(String word : dict){
            Trie temp = trie;
            for(char ch : word.toCharArray()){
                if(temp.children[ch - 'a'] == null){
                    temp.children[ch - 'a'] = new Trie(ch);
                }
                temp = temp.children[ch - 'a'];
            }
            temp.isWord = true;
        }
        return trie;
    }
    
     class Trie{
        boolean isWord;
        Trie[] children;
        char value;
        
        public Trie(char value){
            this.value = value;
            children = new Trie[26];
            this.isWord = false;
        }
    }
}
