recursion!!!!!!!!!!!!!!!!!!!!!!!!!!!!循环，一碰到符号，就将左边和右边的分别求值，recur直到左右两边都只剩下数值，然后根据中间的符号进行相应的运算，
最后将这个运算结果返回给上一层的recursion.

public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> list = new ArrayList<>();
        if(input==null||input.length()==0)return list;
        if(!input.contains("+")&&!input.contains("*")&&!input.contains("-")){
            list.add(Integer.valueOf(input));
            return list;
        }
        
        for(int i = 0 ; i < input.length() ; i++){
            char ch = input.charAt(i);
            if(ch=='+'||ch=='-'||ch=='*'){
                List<Integer> left = diffWaysToCompute(input.substring(0,i));
                List<Integer> right = diffWaysToCompute(input.substring(i+1,input.length()));
                for(Integer le : left){
                    for(Integer rg : right){
                        if(ch=='+'){
                            list.add(le+rg);
                        }
                        else if(ch=='*'){
                            list.add(le*rg);
                        }
                        else{
                            list.add(le-rg);
                        }
                    }
                }
            }
        }
        
        return list;
    }
}

很多recursion的问题都可以用hashmap来存储这一步之前的值，以快速提高效率。见337题。
public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        return dfs(input, new HashMap<String, List<Integer>>());
    }
    
    private List<Integer> dfs(String input, Map<String, List<Integer>> map){
        if(map.containsKey(input)) return map.get(input);
        
        List<Integer> result = new ArrayList<>();
        for(int i=0;i<input.length();i++){
            char curChar = input.charAt(i);
            if(curChar == '+' || curChar == '-' || curChar == '*'){
                String leftPart = input.substring(0,i);
                String rightPart = input.substring(i+1);
                List<Integer> leftResult = dfs(leftPart, map);
                List<Integer> rightResult = dfs(rightPart, map);
                for(Integer left: leftResult){
                    for(Integer right: rightResult){
                        int curResult = 0;
                        switch (curChar){
                            case '+':
                                curResult = left + right;
                                break;
                            case '-':
                                curResult = left - right;
                                break;
                            case '*':
                                curResult = left * right;
                                break;
                        }
                        result.add(curResult);
                    }
                }
            }
        }
        
        if(result.size() == 0){
                result.add(Integer.parseInt(input));
        }
        
        map.put(input, result);
        return result;
    }
}
