if the array is indeed rotated by some pivot, there are only 2 possibilities

a[mid] > a[left] && a[mid] > a[right], meaning we are on the bigger part, the smaller part is on our right, so go right
a[mid] < a[left] && a[mid] < a[right], meaning we are on the smaller part, to find the smallest element, go left
if the array is not rotated (actually one rotating cycle completed), we just need to go left, in this case a[mid] < a[right] always holds.

combining the cases above, we conclude that

if a[mid] > a[right], go right; if a[mid] < a[right], go left.

public class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length-1;
        while(start<end){
            int mid = start + (end-start)/2;
            if(nums[mid]>nums[end]){
                start = mid + 1;  //mid不可能是最小的点。
            }
            else{
                end = mid;  //不能是mid-1，有可能这一点就是最小的点。
            }
        }
        return nums[start]; //此时start==end
    }
}

Time: o(n)
Space: o(1)
