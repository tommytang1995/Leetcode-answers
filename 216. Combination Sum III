public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> res = new ArrayList<>();
        if(n<1||k<1)return res;
        List<Integer> me = new ArrayList<>();
        cur(res, me, 0, k, n, 1);
        return res;
    }
    
    public void cur(List<List<Integer>> res, List<Integer> me, int sum, int k, int n, int level){
    if(sum==n && k==0){
        res.add(new ArrayList(me));
        return;
    }
    else if(sum>n||k<0)return;  //极大地提高了运行效率
    
    for(int i = level ; i <= 9 ; i++){
        me.add(i);
        cur(res, me, sum+i, k-1, n, i+1);
        me.remove(me.size()-1);
    }
    }

Time: o(9^k)
Space: o(9^k)

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> list = new ArrayList<>();
        if(k == 0) return list;
        backtrack(list, new ArrayList<>(), 0, 1, k, n);
        return list;
    }

    public void backtrack(List<List<Integer>> list, List<Integer> temp, int sum, int level, int k, int n){
        if(sum == n && temp.size() == k){
            list.add(new ArrayList<>(temp));
            return;
        }
        for(int i = level; i <= 9; i++){
            temp.add(i);
            backtrack(list, temp, sum + i, i + 1, k, n);
            temp.remove(temp.size()-1);
        }
    }
}
