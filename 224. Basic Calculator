public class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int res = 0;
        int sign = 1;
        int num = 0;
        char ch;
        for(int i = 0; i < s.length(); i++){
            ch = s.charAt(i);
            if(Character.isDigit(ch)){
                num = 10 * num + (ch - '0');
            }
            else if(ch == '+'){
                res += sign * num;
                sign = 1;
                num = 0;
            }
            else if(ch == '-'){
                res += sign * num;
                sign = -1;
                num = 0;
            }
            else if(ch == '('){
                stack.push(res);
                stack.push(sign);
                sign = 1;
                res = 0;
            }
            else if(ch == ')'){
                res += sign * num;
                res *= stack.pop();
                res += stack.pop();
                num = 0;
            }
        }
        if(num != 0) res += sign * num;
        return res;
    }
}

public class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        int res = 0;
        int sign = 1;
        int num = 0;
        char ch;
        for(int i = 0; i < s.length(); i++){
            ch = s.charAt(i);
            if(Character.isDigit(ch)){
                 num = ch - '0';
                while(i + 1 < s.length() && Character.isDigit(s.charAt(i + 1)))
                     { num = 10 * num + (s.charAt(i+1) - '0'); i++;}
                res += sign * num;
            }
            else if(ch == '+'){
                sign = 1;
            }
            else if(ch == '-'){
                sign = -1;
            }
            else if(ch == '('){
                stack.push(res);
                stack.push(sign);
                sign = 1;
                res = 0;
            }
            else if(ch == ')'){
                res *= stack.pop();
                res += stack.pop();
            }
        }
        return res;
    }
}
