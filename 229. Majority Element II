 public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int n = nums.length;
        if(n==0||nums==null)return list;
        int[] can = new int[2];
        int[] cot = new int[2];
        for(int i = 0; i < n; i++){   //找出can中的两个元素（最多两个）
            if(nums[i]==can[0]){   
                cot[0]++;
            }
            else if(nums[i]==can[1]){  //如果等于任何一个，那么对应的count+1
                cot[1]++;
            }
            else if(cot[0]==0){ //不能先写最后这两个else if，例如88777，如果先写，最后的结果只有7
                can[0] = nums[i];
                cot[0] = 1;
            }
            else if(cot[1]==0){  //如果任何一个都不等于，而且对应的count==0的话，说明can中对应的元素要被替换了，且count设为1.
                can[1] = nums[i];
                cot[1] = 1;
            }
            else{   //如果任何一个都不等于且count!=0，说明还不用被替换。只需将两个count都减1。
                cot[0]--;
                cot[1]--;
            }
        }
        Arrays.fill(cot,0);   //初始化count数组，因为以上的算法只是用来得到两个元素，到最后count>0便是所要的元素。因为k==3，所以最多有两个这样
                              //的元素，那些没有出现大于n>3次的元素，在循环一遍后，count都会等于0然后被替换掉。
        for(int i = 0; i < n; i++){  //重新统计，得到准确的出现次数。
            if(nums[i]==can[0]){
                cot[0]++;
            }
            else if(nums[i]==can[1]){
                cot[1]++;
            }
        }
        for(int i = 0; i < 2; i++){
            if(cot[i] > n/3 && !list.contains(can[i])){    //重新判断>n/3
                                                     这是为了防止要求的元素个数小于k-1，假设只有k-2个，那么数组的最后一个元素被误传进去。
                list.add(can[i]);
            }
        }
        return list;
    }
}
