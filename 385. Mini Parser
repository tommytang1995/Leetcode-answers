public class Solution {
    public NestedInteger deserialize(String s) {
        if (s.length()==0||s==null)return null;
        
        Stack<NestedInteger> stack = new Stack<>();
        
        if(s.charAt(0)!='['){return new NestedInteger(Integer.valueOf(s));}
        
        NestedInteger cur = null;
        
        int start = 0;
        
        for(int i = 0 ; i < s.length() ; i++){
            char ch = s.charAt(i);
            if(ch=='['){
                if(cur!=null){
                    stack.push(cur);
                }
                cur = new NestedInteger();
                start = i + 1;
            }
            else if(ch==','){
                if(s.charAt(i-1)!=']'){
                String num = s.substring(start, i);
                cur.add(new NestedInteger(Integer.valueOf(num)));
                }
                start = i + 1;
            }
            else if(ch==']'){
                String num = s.substring(start, i);
                if(!num.isEmpty()){
                    cur.add(new NestedInteger(Integer.valueOf(num)));
                }
                if(!stack.isEmpty()){
                stack.peek().add(cur);
                cur = stack.pop();
                }
                start = i + 1;
            }
        }
        
        return cur;
    }
}
