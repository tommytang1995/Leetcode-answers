/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public NestedInteger deserialize(String s) {
         if (s==null || s.length()==0)return null;
        Stack<NestedInteger> stack = new Stack<>();
        NestedInteger cur = null;
        if(s.charAt(0)!='['){return new NestedInteger(Integer.valueOf(s));}
        char[] ch = s.toCharArray();
        int start = 0;   //每一层整数的起点
        for(int i = 0; i < ch.length; i++){
            if(ch[i] == '['){
                if(cur != null){
                    stack.push(cur);
                }
                cur = new NestedInteger();
                start = i + 1;
            }
            else if(ch[i] == ','){  
                if(ch[i-1] != ']'){  //还可能存在[[23],[234]]这样的情况，所以要判断
                    String temp = s.substring(start, i);
                    cur.add(new NestedInteger(Integer.parseInt(temp)));
                }
                start = i + 1;
            }
            else if(ch[i] == ']'){  //说明要到下一层了
                String temp = s.substring(start, i);
                    if(!temp.isEmpty()){
                        cur.add(new NestedInteger(Integer.parseInt(temp)));
                    }
                    if(!stack.isEmpty()){
                        stack.peek().add(cur);
                        cur = stack.pop();
                    }
                start = i + 1;
            }
        }
        return cur;
    }
}
