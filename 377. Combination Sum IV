//The problem with negative numbers is that now the combinations could be potentially of infinite length. Think about nums = [-1, 1] 
and target = 1. We can have all sequences of arbitrary length that follow the patterns -1, 1, -1, 1, ..., -1, 1, 1 and 1, -1, 1, -1, 
..., 1, -1, 1 (there are also others, of course, just to give an example). So we should limit the length of the combination sequence, 
so as to give a bound to the problem.

I think if there are negative numbers in the array, we must add a requirement that each number is only used one time, or either positive number or negative number should be used only one time, otherwise there would be infinite possible combinations.
For example, we are given:
{1, -1}, target = 1,
it's obvious to see as long as we choose n 1s and (n-1) -1s, it always sums up to 1, n can be any value >= 1.

public class Solution {
    public int combinationSum4(int[] nums, int target) {
        int[] res = new int[target + 1];
        res[0] = 1;
        for(int i = 1; i <= target; i++){
            for(int j = 0; j < nums.length; j++){
                if(i >= nums[j]) res[i] += res[i- nums[j]];
            }
        }
        return res[target];
    }
}
public class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    public int combinationSum4(int[] nums, int target) {
        if(nums == null || nums.length == 0 || target < 0) return 0;
        if(target == 0) return 1;
        if(map.containsKey(target)){
            return map.get(target);
        }
        int count = 0;
        for(int num : nums){
                count += combinationSum4(nums, target - num);
        }
        map.put(target, count);
        return count;

}
}

public class Solution {
    public int combinationSum4(int[] nums, int target) {
        if (nums == null || nums.length == 0 || target <= 0) {
            return 0;
        }
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        map.put(0, 1);  //DON'T FORGET THIS!!!!!!!!!!!!!
        helper(nums, target, map);
        return map.get(target);
    }
    
    public int helper(int[] nums, int sum, Map<Integer, Integer> map){
        if(nums == null || nums.length == 0 || sum < 0) return 0;
        if(map.containsKey(sum)) return map.get(sum);
        int num = 0;
        for(int i = 0; i < nums.length; i++){
            if(map.containsKey(sum - nums[i])) num += map.get(sum - nums[i]);
            else{
                num += helper(nums, sum - nums[i], map);
            }
        }
        map.put(sum, num);
        return num;
    }
}

public class Solution {
    public int combinationSum4(int[] nums, int target) {
        if (nums == null || nums.length == 0 || target <= 0) {
            return 0;
        }
        Arrays.sort(nums); //Because of this line, we should break instead of continue under if (num > i)
        int[] dp = new int[target + 1];
        for(int i = 1; i <= target; i++){
            for(int num : nums){
                if(num > i){
                    break;
                }
                else if(num == i){
                    dp[i] += 1;
                }
                else{
                    dp[i] += dp[i - num];
                }
            }
        }
        return dp[target];
    }
}
