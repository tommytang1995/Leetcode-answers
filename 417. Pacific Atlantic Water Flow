public class Solution {
    int[][] dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res = new ArrayList<>();
        if(matrix == null || matrix.length == 0) {
            return res;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        for(int i = 0; i < m; i++) {
            dfs(matrix, i, 0, Integer.MIN_VALUE, pacific);
            dfs(matrix, i, n - 1, Integer.MIN_VALUE, atlantic);
        }
        for(int i = 0; i < n; i++) {
            dfs(matrix, 0, i, Integer.MIN_VALUE, pacific);
            dfs(matrix, m - 1, i, Integer.MIN_VALUE, atlantic);
        }
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(pacific[i][j] && atlantic[i][j]) {
                    res.add(new int[]{i, j});
                }
            }
        }
        return res;
    }
    
    public void dfs(int[][] matrix, int x, int y, int lastHeight, boolean[][] reachable) {
        if(x < 0 || x >= matrix.length || y < 0 || y >= matrix[0].length || reachable[x][y] || matrix[x][y] < lastHeight) {
            return;
        }
        reachable[x][y] = true;
        for(int[] array : dir) {
            dfs(matrix, x + array[0], y + array[1], matrix[x][y], reachable);
        }
    }
}
