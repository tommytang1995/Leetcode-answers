class Solution {
    int[][] dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    public int[][] updateMatrix(int[][] matrix) {
        Queue<int[]> queue = new LinkedList<>();
        for(int i = 0; i < matrix.length; i++) {
            for(int j = 0; j < matrix[0].length; j++) {
                if(matrix[i][j] == 0) {
                    queue.offer(new int[]{i, j});
                }
                else{
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        while(!queue.isEmpty()) {
            int[] temp = queue.poll();
            for(int[] move : dir) {
                int x = temp[0] + move[0];
                int y = temp[1] + move[1];
                if(x < 0 || y < 0 || x >= matrix.length || y >= matrix[0].length || matrix[x][y] != Integer.MAX_VALUE) {
                    continue;
                }
                matrix[x][y] = matrix[temp[0]][temp[1]] + 1;
                queue.offer(new int[]{x, y});
            }
        }
        return matrix;
    }
}
