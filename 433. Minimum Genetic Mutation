class Solution {
    public int minMutation(String start, String end, String[] bank) {
        if(start.equals(end)) {
            return 0;
        }
        Queue<String> queue = new LinkedList<>();
        int level = 0;
        char[] letters = {'A', 'C', 'G', 'T'};
        Set<String> set = new HashSet<>();
        Set<String> visited = new HashSet<>();
        for(String str : bank) {
            set.add(str);
        }
        queue.offer(start);
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                String temp = queue.poll();
                if(temp.equals(end)) {
                    return level;
                }
                for(int j = 0; j < temp.length(); j++) {
                    for(char ch : letters) {
                        String newStr = temp.substring(0, j) + ch + temp.substring(j + 1);
                        if(visited.add(newStr) && set.contains(newStr)) {
                            queue.offer(newStr);
                        }
                    }
                }
            }
            level++;
        }
        return -1;
    }
}
