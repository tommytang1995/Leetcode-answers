public class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 1;
        for(; i >= 1; i--){   //从尾到头，找到第一个满足后一个元素second大于前一个元素first
            if(nums[i] > nums[i-1]){
                break;
            }
        }
        if(i != 0){        //若等于零，说明这是最大的一种排列，下一个就是最小的排列，也就是这个if后面的翻转数组
            for(int j = nums.length - 1; j > i - 1; j-- ){    //若不等于零，则从尾向前找，第一个大于first的元素，将其与first调换
                if(nums[j] > nums[i-1]){
                    int temp = nums[j];
                    nums[j] = nums[i-1];
                    nums[i-1] = temp;
                    break;
                }
            }
        }
        int start = i;   //完成上一步之后，要对second及之后的元素进行翻转，至此完成。
        int end = nums.length - 1;
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}

Time: o(n)
Space: o(1)


public class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 0){
            return;
        }
        int k = -1;
        for(int i = nums.length - 2; i >= 0; i--){
            if(nums[i] < nums[i + 1]){
                k = i;
                break;
            }
        }
        if(k == -1){
            reverse(nums, 0, nums.length - 1);
            return;
        }
        int l = -1;
        for(int i = nums.length - 1; i > k; i--){
            if(nums[i] > nums[k]){
                l = i;
                break;
            }
        }
        swap(nums, l, k);
        reverse(nums, k + 1, nums.length - 1);
    }
    
    public void swap(int[] nums, int left, int right){
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
    
    public void reverse(int[] nums, int left, int right){
        while(left < right){
            swap(nums, left++, right--);
        }
    }
}

//1.Find the largest index k such that nums[k]<nums[k + 1]. If no such index exists, the permutation is sorted in descending
//order, just reverse it to ascending order and we are done. For example, the next permutation of [3, 2, 1] is [1, 2, 3].
//2.Find the largest index l greater than k such that nums[k] < nums[l].
//3.Swap the value of nums[k] with that of nums[l].
//4.Reverse the sequence from nums[k + 1] up to and including the final element nums[nums.size() - 1].
