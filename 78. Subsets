public class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        int start = 0;
        backtrack(list,new ArrayList<>(),nums,start);
        return list;
    }
    public void backtrack(List<List<Integer>> list,List<Integer> res,int[] nums,int start){
            list.add(new ArrayList<>(res));
        for(int i = start ; i < nums.length ; i++){  //i = start not i = 0
            res.add(nums[i]);
            backtrack(list,res,nums,i+1);
            res.remove(res.size()-1);
        }
    }
}
全排列组合的这种backtrack不需要判断条件return！
Time: In this case i think T(n) = T(n-1) + T(n-2) + ... + T(1) = (T(n-2) + T(n-1) + ...) + T(n-2) + T(n - 1) + … = 2T(n-2),
so on and so forth, T(n) = 2T(n-1) = 4T(n-2) = … = 2^nT(1), where I think T(1) is O(1).
Space: o(2^n)
