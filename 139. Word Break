public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        boolean[] bool = new boolean[s.length()+1];
        bool[0] = true;
        for(int i = 1 ; i <= s.length() ; i++){
            for(int j = 0 ; j < i ; j++){
                if(bool[j]&&wordDict.contains(s.substring(j,i))){
                    bool[i]=true;
                    break;
                }
            }
        }
        return bool[s.length()];
    }
}

public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i = 1; i <= s.length(); i++){
            for(int j = i - 1; j >= 0; j--){
                if(dp[j] && wordDict.contains(s.substring(j, i))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.length()];
    }
}

public class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i = 1; i <= s.length(); i++){
            for(String str : wordDict){
                if(str.length() <= i){
                    if(dp[i - str.length()] && s.substring(i - str.length(), i).equals(str)){
                        dp[i] = true;
                        break;
                    }
                }
            }
        }
        return dp[s.length()];
    }
}
