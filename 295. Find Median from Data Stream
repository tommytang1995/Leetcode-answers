class MedianFinder {

    PriorityQueue<Integer> minHeap;
    PriorityQueue<Integer> maxHeap;
    /** initialize your data structure here. */
    public MedianFinder() {
        maxHeap = new PriorityQueue<>(new Comparator<Integer>(){
            @Override
            public int compare(Integer a, Integer b) {
                return b - a;
            }
        });
        minHeap = new PriorityQueue<>(new Comparator<Integer>(){
            @Override
            public int compare(Integer a, Integer b) {
                return a - b;
            }
        });
    }
    
    public void addNum(int num) {
        if(minHeap.size() == 0 && maxHeap.size() == 0) {
            minHeap.offer(num);
        }
        else if(minHeap.size() > maxHeap.size()) {
            if(minHeap.peek() < num) {
                maxHeap.offer(minHeap.poll());
                minHeap.offer(num);
            }
            else maxHeap.offer(num);
        }
        else if(minHeap.size() < maxHeap.size()) {
            if(maxHeap.peek() > num) {
                minHeap.offer(maxHeap.poll());
                maxHeap.offer(num);
            }
            else minHeap.offer(num);
        }
        else {
            if(minHeap.peek() < num) {
                minHeap.offer(num);
            }
            else {
                maxHeap.offer(num);
            }
        }
    }
    
    public double findMedian() {
        if((minHeap.size() == 0) && (maxHeap.size() == 0)) {
            return 0.0;
        } 
        if(minHeap.size() > maxHeap.size()) {
            return (double) minHeap.peek();
        }
        else if(minHeap.size() < maxHeap.size()) {
            return (double) maxHeap.peek();
        }
        else {
            return (minHeap.peek() + maxHeap.peek()) / 2.0;
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */

