

public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums == null || nums.length == 0 ){
            return;
        }
        int n = nums.length;
        k %= n;
        reverse(nums,0,n-1);
        reverse(nums,0,k-1);
        reverse(nums,k,n-1);
    }
    
    public void reverse(int[] nums, int start, int end){   //记得反转数组的时候都是用start和end这种方法！！而不是for
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;    //千万不要忘记！！！！
            end--;
        }
    }
}

Time: o(n)
Space: o(1)

public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums == null || nums.length == 0 ){
            return;
        }
        int n = nums.length;
        k %= n;
        for(int start = 0; start<nums.length && k!=0; k%=n){
            for(int i = 0; i < k; i++){
                swap(nums,start+i,nums.length-k+i);
            }
            n -= k;
            start += k;
        }
    }
    
    public void swap(int[] nums, int start, int end){
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }
}
https://discuss.leetcode.com/topic/9406/3-lines-of-c-in-one-pass-using-swap/17

public class Solution {
    public void rotate(int[] nums, int k) {
        if(nums == null || nums.length == 0 || k <= 0){
            return;
        }
        k %= nums.length;
        int[] temp = new int[k];
        for(int i = 0; i < temp.length; i++){
            temp[i] = nums[nums.length - k + i];
        }
        for(int i = nums.length - k - 1; i >= 0; i--){
            nums[i + k] = nums[i];
        }
        for(int i = 0; i < temp.length; i++){
            nums[i] = temp[i];
        }
    }
}
