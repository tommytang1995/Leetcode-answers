class TrieNode {
    // Initialize your data structure here.
    public boolean isWord;
    public TrieNode[] children = new TrieNode[26];
    public TrieNode() {
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode temp = root;
        for(int i = 0 ; i < word.length() ; i++){
            char ch = word.charAt(i);
            if(temp.children[ch-'a']==null){
                temp.children[ch-'a'] = new TrieNode();
            }
            temp = temp.children[ch-'a'];  //相当于找下一个字母是什么，每一个字母都对应有一个大小为26的数组，数组中哪个位置不是null，就说明
                                           //下一个字母是这个位置对应的字母。
        }
        temp.isWord = true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode temp = root;
        for(int i = 0 ; i < word.length() ; i++){
            char ch = word.charAt(i);
            if(temp.children[ch-'a']==null){
                return false;
            }
            temp = temp.children[ch-'a'];
        }
        return temp.isWord;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode temp = root;
        for(int i = 0 ; i < prefix.length() ; i++){
            char ch = prefix.charAt(i);
            if(temp.children[ch-'a']==null){
                return false;
            }
            temp = temp.children[ch-'a'];
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
