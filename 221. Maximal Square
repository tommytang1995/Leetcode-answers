public class Solution {
2
    public int maximalSquare(char[][] matrix) {
3
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
4
            return 0;
5
        }
6
        int[][] dp = new int[matrix.length + 1][matrix[0].length + 1];
7
        int max = 0;
8
        for(int i = 1; i <= matrix.length; i++){
9
            for(int j = 1; j <= matrix[0].length; j++){
10
                if(matrix[i - 1][j - 1] == '1'){
11
                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i - 1][j - 1], dp[i][j - 1])) + 1;
12
                }
13
                max = Math.max(max, dp[i][j]);
14
            }
15
        }
16
        return max * max;
17
    }
18
}
19
​
20
​
21
//cannot use dp = new int[n+1] because only in this way we can keep dp[i-1][j-1]
22
public class Solution {
23
    public int maximalSquare(char[][] matrix) {
24
        if (matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0) {
25
            return 0;
26
        }
27
        int m = matrix.length;
28
        int n = matrix[0].length;
29
        int[] dp = new int[m + 1];//use dp[0] to represent the out of boundary value of every col's top row
30
        int max = 0;
31
        int prev = 0;//use this to store dp[i - 1][j - 1]
32
        for (int j = 0; j < n; j++) {
33
            for (int i = 1; i <= m; i++) {
34
                int temp = dp[i];//store the value of last col before updating it, which is dp[i - 1][j - 1]
35
                if (matrix[i - 1][j] == '1') {//cuz here our i starts from 1, so matrix[i-1][j] is the original matrix[i][j]
36
                    dp[i] = Math.min(Math.min(dp[i - 1], dp[i]), prev) + 1;
37
                    max = Math.max(max, dp[i]);
38
                } else {
39
                    dp[i] = 0;//remember to add this !! 
40
                }
41
                prev = temp;//update prev, which becomes next row's dp[i - 1][j - 1]
42
            }
43
        }
44
        return max * max;//max*max, not max !!! cuz max is the length of the side of the max square
45
    }
46
}
