public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int sum = 0, from = 0, win = Integer.MAX_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            while (sum >= s) {
                win = Math.min(win, i - from + 1);
                sum -= nums[from++];
            }
        }
        return (win == Integer.MAX_VALUE) ? 0 : win;
    }
}

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
T        int sum = 0;
        int from = 0;
        int window = nums.length + 1;
        int i = 0;
        while(i < nums.length){
            while(i < nums.length && sum < s){
                sum += nums[i++];
            }
            while(sum >= s){
                window = Math.min(window, i-from);
                sum -= nums[from++];
            }
        }
        return window == nums.length + 1 ? 0 : window;
    }
}
Time: o(2n)/o(n)
Space: o(1)

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int left = 1;
        int right = nums.length;
        int min = 0;
        while(left <= right){    //try every possible size and see if there exists a windown sum with a certain size satisfies conditions
            int mid = left + (right - left) / 2;
            if(windowExists(mid, s, nums)){
                right = mid - 1;
                min = mid;
            }
            else{
                left= mid + 1;
            }
        }
        return min;
    }
    
    public boolean windowExists(int size, int s, int[] nums){
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            if(i == size) sum -= nums[i - size];
            sum += nums[i];
            if(sum >= s) return true;
        }
        return false;
    }
}
Time: o(nlogn)
