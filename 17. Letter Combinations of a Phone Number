public class Solution {
    private Map<Integer, String> map = new HashMap<>();
    public List<String> letterCombinations(String digits) {
        List<String> list = new ArrayList<>();
        if(digits == null || digits.length() == 0) return list;
        map.put(2,"abc");
        map.put(3,"def");
        map.put(4,"ghi");
        map.put(5,"jkl");
        map.put(6,"mno");
        map.put(7,"pqrs");
        map.put(8,"tuv");
        map.put(9,"wxyz");
        helper(digits, 0, list, new StringBuilder());
        return list;
    }
    public void helper(String digits, int level, List<String> list, StringBuilder sb){
        if(sb.length() == digits.length()){
            list.add(sb.toString());
            return;
        }
        String letters = map.get(digits.charAt(level) - '0');
        for(int i = 0; i < letters.length(); i++){
            sb.append(letters.charAt(i));
            helper(digits, level+1, list, sb);
            sb.setLength(sb.length()-1);   //注意这个！！！！如果用的是string就不需要！！！！
        }
    }
}
Time: o(3.5^n)
Space: o(3.5^n)

public class Solution {
    private Map<Integer, String> map = new HashMap<>();
    public List<String> letterCombinations(String digits) {
        if(digits == null || digits.length() == 0) return new ArrayList<>();
        map.put(2,"abc");
        map.put(3,"def");
        map.put(4,"ghi");
        map.put(5,"jkl");
        map.put(6,"mno");
        map.put(7,"pqrs");
        map.put(8,"tuv");
        map.put(9,"wxyz");
        Queue<String> queue = new LinkedList<>();
        queue.offer("");
        for(int i = 0; i < digits.length(); i++){
            char[] letters = map.get(digits.charAt(i)-'0').toCharArray();
            while(queue.peek().length() == i){
                String temp = queue.poll();
                for(int j = 0; j < letters.length; j++){
                    queue.offer(temp + letters[j]);
                }
            }
        }
        return new ArrayList<>(queue);
    }
}
Time: o(3.5^n)
Space: o(3.5^n)
