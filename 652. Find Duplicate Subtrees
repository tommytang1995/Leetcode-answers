/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> list = new ArrayList<>();
        postOrder(list, root, new HashMap<>());
        return list;
    }
    
    public String postOrder(List<TreeNode> list, TreeNode root, Map<String, Integer> map) {
        if(root == null) {
            return "#";
        }
        String cur = root.val + "," + postOrder(list, root.left, map) + postOrder(list, root.right, map);
        if(map.getOrDefault(cur, 0) == 1) {
            list.add(root);
        }
        map.put(cur, map.getOrDefault(cur, 0) + 1);
        return cur;
    }
}
