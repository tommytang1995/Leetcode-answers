public class Solution {
	public List<Integer> getRow(int rowIndex) {
		List<Integer> list = new ArrayList<>();
		list.add(1);
		for(int i = 1; i <= rowIndex; i++){
		    for(int j = i - 1; j >= 1; j--){  //不用修改第一个，因为永远都是1        
        int temp = list.get(j-1) + list.get(j);
		        list.set(j, temp);
		    }
		    list.add(1);  //在行末加上一个1		
}
		return list;
	}
}
Time: o((n-1)!)

public class Solution {
	public List<Integer> getRow(int rowIndex) {
		Integer[] res = new Integer[rowIndex+1];  
		res[0] = 1;
		for(int i = 1; i <= rowIndex; i++){
		    res[i] = (int)((double)res[i-1]*(rowIndex-i+1)/i);
		}
		return Arrays.asList(res);//若数组是整数型，必须是integer型而不是int
}
}
Time: o(n)

public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> list = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        temp.add(1);
        list.add(temp);
        for(int i = 1; i <= rowIndex; i++){
            temp = new ArrayList<>();
            temp.add(1);
            for(int j = 1; j < i; j++){
                temp.add(list.get(i - 1).get(j- 1) + list.get(i - 1).get(j));
            }
            temp.add(1);
            list.add(temp);
        }
        return list.get(rowIndex);
    }
}
