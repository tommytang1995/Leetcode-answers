public class Solution {
    int left = 0;
    int maxLen = 0;
    public String longestPalindrome(String s) {
        if(s.length()<2)return s;
        for(int i = 0 ; i < s.length()-1 ; i++){
            helper(s,i,i);
            helper(s,i,i+1);
        }
        return s.substring(left,left+maxLen);
    }
    
    public void helper(String s, int m , int n){
        while(m>=0&&n<s.length()&&s.charAt(m)==s.charAt(n)){
            m--;
            n++;
        }
        if(maxLen<n-m-1){  //去掉了两端两个不相等的元素的长度
            left=m+1;  最左端的不能算作起始位置
            maxLen=n-m-1;
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------
public class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String res = "";
        boolean[][] dp = new boolean[n][n];
        for(int i = n-1 ; i >= 0 ; i--){
            for(int j = i ; j < n ; j++){
                dp[i][j] = s.charAt(i)==s.charAt(j) && (j - i < 3 || dp[i+1][j-1]);
                
                if(dp[i][j] && (res.length() == 0 || j - i + 1 > res.length())){
                    res = s.substring(i,j+1);
                }
            }
        }
        return res;
    }
}
