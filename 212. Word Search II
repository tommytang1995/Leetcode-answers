class Solution {
    
    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        String word;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        List<String> list = new ArrayList<>();
        TrieNode root = buildTree(words);
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                for(String word : words) {
                    helper(board, i, j, root, list);
                }
            }
        }
        return list;
    }
    
    public void helper(char[][] board, int i, int j, TrieNode root, List<String> list) {
        char ch = board[i][j];
        if(ch == '*' || root.children[ch - 'a'] == null) {
            return;
        }
        root = root.children[ch - 'a'];
        if(root.word != null) {
            list.add(root.word);
            root.word = null;
        }
        board[i][j] = '*';
        if(i > 0) helper(board, i - 1, j, root, list);
        if(j > 0) helper(board, i, j - 1, root, list);
        if(i < board.length - 1) helper(board, i + 1, j, root, list);
        if(j < board[0].length - 1) helper(board, i, j + 1, root, list);
        board[i][j] = ch;
    }
    
    public TrieNode buildTree(String[] words) {
        TrieNode root = new TrieNode();
        for(int i = 0; i < words.length; i++) {
            TrieNode node = root;
            for(int j = 0; j < words[i].length(); j++) {
                char ch = words[i].charAt(j);
                if(node.children[ch - 'a'] == null) {
                    node.children[ch - 'a'] = new TrieNode();
                }
                node = node.children[ch - 'a'];
            }
            node.word = words[i];
        }
        return root;
    }
}

