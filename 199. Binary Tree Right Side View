/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        helper(root, list, 0);
        return list;
    }
    public void helper(TreeNode root, List<Integer> list, int level){
        if(root == null) return;
        if(list.size()==level) list.add(root.val);  //说明从右向左，这是第一个非null的节点，那么看到的应该就是这个点，对于更左的点，由于if条件不满
                                                    //足，不会加进list中。
        helper(root.right, list, level + 1);
        helper(root.left, list, level + 1);
    }
}
Time: o(n)
Space: o(logn)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if(root == null) return list;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            boolean first = true;  //判断是否是这一层的最右边的节点
            for(int i = 0; i < size; i++){
                if(first) {list.add(queue.peek().val); first = false;}  //记得一定要设为false!!!
                TreeNode temp = queue.poll();
                if(temp.right != null) queue.offer(temp.right);
                if(temp.left != null) queue.offer(temp.left);
            }
        }
        return list;
    }
}
