/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 注意与112题的区别，这一题是要判断和是否等于某个值，所以是backtrack，每一次都要删除最后一个元素。
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null)return list;
        helper(root,sum,0,new ArrayList<>(),list);
        return list;
    }
    
    public void helper(TreeNode node, int sum, int num, List<Integer> temp, List<List<Integer>> list){
        if (node==null)return;
        temp.add(node.val);
        if(node.left==null&&node.right==null&&num+node.val==sum){
            list.add(new ArrayList<>(temp));
        }
        else{
            helper(node.left,sum,num+node.val,temp,list);
            helper(node.right,sum,num+node.val,temp,list);
        }
        temp.remove(temp.size()-1);
    }
}
Time: o(n)
Space: o(logn)

//用stack进行backtrack
public class Solution {
    private List<List<Integer>> resultList = new ArrayList<List<Integer>>();
    
    public void pathSumInner(TreeNode root, int sum, Stack<Integer>path) {
        path.push(root.val);
        if(root.left == null && root.right == null)
            if(sum == root.val) resultList.add(new ArrayList<Integer>(path));
        if(root.left!=null) pathSumInner(root.left, sum-root.val, path);
        if(root.right!=null)pathSumInner(root.right, sum-root.val, path);
        path.pop();
    }
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        if(root==null) return resultList;
        Stack<Integer> path = new Stack<Integer>();
        pathSumInner(root, sum, path);
        return resultList;
    }
}
Time: o(n)
Space: o(logn)
