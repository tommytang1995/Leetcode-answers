
public class Solution {
    public int longestConsecutive(int[] nums) {
          Set<Integer> set = new HashSet<>();
            for(int n : nums) {
                set.add(n);
            }
            int best = 0;
            for(int n : set) {
                if(!set.contains(n - 1)) {  // only check for one direction, look for the start of the other independent sequence
                                            // make sure n is the smallest element in one possible consecutive sequence.
                    int m = n + 1;
                    while(set.contains(m)) {
                        m++;
                    }
                    best = Math.max(best, m - n);
                }
            }
            return best;
    }
}
Time: o(n) because we only check each streak(consecutive sequence)
Space: o(n)

public class Solution {
    public int longestConsecutive(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for(int num : nums) {
            if(!map.containsKey(num)) {
                int left = (map.containsKey(num - 1) ? map.get(num - 1) : 0);
                int right = (map.containsKey(num + 1) ? map.get(num + 1) : 0);
                int sum = left + right + 1;
                max = Math.max(max, sum);
                map.put(num, sum);
                map.put(num - left, sum);
                map.put(num + right, sum);
            }
        }
        return max;
    }
}
