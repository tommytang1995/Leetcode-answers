public class Solution {
    public int longestConsecutive(int[] nums) {
          Set<Integer> set = new HashSet<>();
            for(int n : nums) {
                set.add(n);
            }
            int best = 0;
            for(int n : set) {
                if(!set.contains(n - 1)) {  // only check for one direction, look for the start of the other independent sequence
                    int m = n + 1;
                    while(set.contains(m)) {
                        m++;
                    }
                    best = Math.max(best, m - n);
                }
            }
            return best;
    }
}
Time: o(n) because we only check each streak(consecutive sequence)
Space: o(n)
