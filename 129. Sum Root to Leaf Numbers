/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private int sum = 0;
    public int sumNumbers(TreeNode root) {
        if(root == null) return 0;
        helper(root, 0);
        return sum;
    }
    public void helper(TreeNode root, int num){
        if(root == null) return;
        if(root.left == null && root.right == null) {sum += 10*num + root.val; return;}
        helper(root.left, 10*num + root.val);
        helper(root.right, 10*num + root.val);
    }
}
Time: o(n)
Space: o(logn)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root==null)return 0;
        Queue<TreeNode> queue1 = new LinkedList<>();
        int sum = 0;
        queue1.offer(root);
        
        while(!queue1.isEmpty()){
            TreeNode temp = queue1.poll();
            
            if(temp.left!=null){
                temp.left.val=temp.val*10+temp.left.val;
                queue1.offer(temp.left);
            }
            
            if(temp.right!=null){
                temp.right.val=temp.val*10+temp.right.val;
                queue1.offer(temp.right);
            }
            
            if(temp.left==null&temp.right==null){
                sum = sum + temp.val;
            }
        }
        return sum;
    }
}
Time: o(n)
Space: o(logn)
