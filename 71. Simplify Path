public class Solution {
    public String simplifyPath(String path) {
        Stack<String> stack = new Stack<>();
        for(String str : path.split("/")){
            if(str.isEmpty() || str.equals(".")) continue;
            if(str.equals("..")){
                if(!stack.isEmpty())stack.pop();
            }
            else{
                stack.push(str);
            }
        }
        StringBuilder sb = new StringBuilder();
        for(String str : stack){
            sb.append("/" + str);
        }
        return sb.length() == 0 ? "/" : sb.toString();
    }
}
* 当遇到“/../"则需要返回上级目录，需检查上级目录是否为空。
     * 当遇到"/./"则表示是本级目录，无需做任何特殊操作。 
     * 当遇到"//"则表示是本级目录，无需做任何操作。
     * 当遇到其他字符则表示是文件夹名，无需简化。
     * 当字符串是空或者遇到”/../”，则需要返回一个"/"。
     * 当遇见"/a//b"，则需要简化为"/a/b"
     * 我的思路是先把所有的按照/分割开来
     * 当字符串不为".."，则将字符串入栈。
     * 当字符串为"..", 则弹栈（返回上级目录）
     
Time: o(n)
Space: o(n)
