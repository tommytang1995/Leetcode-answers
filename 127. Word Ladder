class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(beginWord.length() != endWord.length()) {
            return 0;
        }
        if(!wordList.contains(endWord)) {
            return 0;
        }
        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        Set<String> set = new HashSet<>();
        Set<String> list = new HashSet<>(wordList);
        set.add(beginWord);
        int level = 1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int m = 0; m < size; m++) {
                String temp = queue.poll();
                for(int i = 0; i < temp.length(); i++) {
                    char[] chars = temp.toCharArray();
                    for(char ch = 'a'; ch <= 'z'; ch++) {
                        chars[i] = ch;
                        String str = new String(chars);
                        if(str.equals(endWord)) {
                            return level + 1;
                        }
                        if(!set.contains(str) && list.contains(str)) {
                            queue.offer(str);
                            set.add(str);
                        }
                    }
                }
            }
            level++;
        }
        return 0;
    }
}
