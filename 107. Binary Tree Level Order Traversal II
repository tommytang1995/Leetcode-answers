/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
//BFS//////////////////////
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root==null)return list;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> res = new ArrayList<>();
            for(int i = 0 ; i < size ; i++){
                TreeNode temp = queue.poll();
            if(temp.left!=null){
                queue.offer(temp.left);
            }
            if(temp.right!=null){
                queue.offer(temp.right);
            }
            res.add(temp.val);
          }
          list.add(0,res);
        }
        return list;
    }
}

////DFS/////////////////////////////
public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list,root,0);
        Collections.reverse(list);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, TreeNode root, int level){
        if(root==null){
            return;
        }
        if(list.size()==level){                  //if there is more than one val in this level, there is no need to create a new list.
            list.add(new ArrayList<Integer>());
        }
        list.get(level).add(root.val);
        
        backtrack(list,root.left,level+1);
        backtrack(list,root.right,level+1);
    }
