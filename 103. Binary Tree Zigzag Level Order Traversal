/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
*******************************************BFS of iterative and recursive version:*************************************************

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if (root == null) return list;
        Queue<TreeNode> queue = new LinkedList<>();
        boolean bool = false;
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> temp = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode node = queue.poll();
                if(bool){
                    temp.add(0, node.val);
                }
                else{
                    temp.add(node.val);
                }
                if(node.left != null) queue.offer(node.left);
                if(node.right != null) queue.offer(node.right);
            }
            list.add(temp);
            bool = !bool;
        }
        return list;
    }
}
Time: o(n^2)
Space: o(n)

public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        helper(root,list,0);
        return list;
    }
    
    public void helper(TreeNode node, List<List<Integer>> list, int level){
        if(node==null){
            return;
        }
        if(list.size()==level){
            List<Integer> li = new ArrayList<>();
            list.add(li);
        }
        List<Integer> temp = list.get(level);
        if(level%2!=0){
            temp.add(0,node.val);
        }
        else{
            temp.add(node.val);
        }
        helper(node.left,list,level+1);
        helper(node.right,list,level+1);
    }
}
Time: o(n^2)
Space: o(logn)
