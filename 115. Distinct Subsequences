class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp = new int[s.length() + 1][t.length() + 1];
        for(int i = 0; i < s.length(); i++) {
            dp[i][0] = 1;
        }
        for(int i = 1; i <= s.length(); i++) {
            for(int j = 1; j <= t.length(); j++) {
                if(s.charAt(i - 1) == t.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]; //假设s=aab，t=ab，那么这一步的意思就是，结果有两部分：
                                                                //第一是我们看前面有多少a，这样可以跟这个b结合得到一个数
                                                                //第二是我们不用这个b，看看前面有多少个ab
                }
                else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[s.length()][t.length()];
    }
}

public int numDistinct_sdp(String S, String T) {
	int sl = S.length();
	int tl = T.length();
	
	int [] preComb = new int[sl+1];
	int [] comb = new int[sl+1];
	
	
	for(int i=0; i<=sl; i++)
		preComb[i] = 1;		

	for(int t=1; t<=tl; ++t){
		for(int s=1; s<=sl; ++s){
			if(T.charAt(t-1) != S.charAt(s-1)){
				comb[s] = comb[s-1];
			}else{
				comb[s] = comb[s-1] + preComb[s-1];
			}
		}
		
		for(int i=0; i<=sl; ++i){
			preComb[i] = comb[i];
		}
	}
	
	return preComb[sl];
}
