public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> list = new ArrayList<>();
        backtrack(list,new ArrayList<>(),candidates,target,0,0);
        return list;
    }
    public void backtrack(List<List<Integer>> list,List<Integer> ha,int[] candidates, int target,int level,int sum){
        if(sum==target && !list.containsAll(ha)){
            list.add(new ArrayList<>(ha));
            return;
        }
        if(sum>target){
            return;
        }
        for(int i = level ; i < candidates.length ; i++){
            if (i > level && candidates[i] == candidates[i-1]) continue;
            ha.add(candidates[i]);
            backtrack(list,ha,candidates,target,i+1,sum+candidates[i]);
            ha.remove(ha.size()-1);
        }
    }
}
