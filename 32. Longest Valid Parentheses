class Solution {
    public int longestValidParentheses(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if(ch == '(') {
                stack.push(i);
            }
            else {
                if(stack.isEmpty()) {
                    stack.push(i);
                }
                else {
                    if(s.charAt(stack.peek()) == '(') {
                        stack.pop();
                    }
                    else {
                        stack.push(i);
                    }
                }
            }
        }
        if(stack.size() == 0) {
            return s.length();
        }
        int right = s.length(); 
        int left = 0;
        int res = 0;
        while(!stack.isEmpty()) {
            left = stack.pop();
            res = Math.max(res, right - left - 1); //right - 1 - (left + 1) + 1, substring from left + 1 to right - 1 must be valid
            right = left;
        }
        res = Math.max(res, right); //a case: ()( : from 0 to right - 1, all valid.
        return res;
    }
}
