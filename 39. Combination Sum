public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list = new ArrayList<>();
        if(candidates == null || candidates.length == 0){
            return list;
        }
        backtrack(list, candidates, new ArrayList<>(), target, 0, 0);
        return list;
    }
    
    public void backtrack(List<List<Integer>> list, int[] candidates, List<Integer> temp, int target, int sum, int level){
        if(sum == target){
            list.add(new ArrayList<>(temp));
            return;
        }
        if(sum > target){
            return;
        }
        for(int i = level; i < candidates.length; i++){
            temp.add(candidates[i]);
            backtrack(list, candidates, temp, target, sum + candidates[i], i);
            temp.remove(temp.size() - 1);
        }
    }
}

Time: o( 2 ^ n)
Space: o()
