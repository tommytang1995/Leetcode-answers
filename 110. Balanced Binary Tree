/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null)return true;
        if(Math.abs(getH(root.left)-getH(root.right))>1)return false;
        return isBalanced(root.left)&&isBalanced(root.right);
    }
    
    public int getH(TreeNode node){
        if(node==null)return 0;
        int left = getH(node.left);
        int right = getH(node.right);
        return Math.max(left,right)+1;
    }
}


public class Solution {  //只要这个节点不balanced了，就将它的height设为-1，如果balanced，就加1.
    public boolean isBalanced(TreeNode root) {
        if(height(root) == -1) return false;
        return true;
    }
    public int height(TreeNode node){
        if(node == null) return 0;
        int left = height(node.left);
        if(left == -1) return -1;
        int right = height(node.right);
        if(right == -1) return -1;
        if(Math.abs(left - right) > 1) return -1;
        return 1 + Math.max(left, right);
    }
}
Time: o(n)
Space: o(logn)
