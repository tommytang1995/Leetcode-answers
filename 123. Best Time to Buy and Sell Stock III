
public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length < 2) return 0;
        int maxProfit1 = 0; 
	    int maxProfit2 = 0; 
	    int lowestBuyPrices1 = Integer.MAX_VALUE;
	    int lowestBuyPrices2 = Integer.MAX_VALUE;
	   
	    for(int p:prices){
	    	lowestBuyPrices1 = Math.min(lowestBuyPrices1, p);
	    	maxProfit1 = Math.max(maxProfit1, p - lowestBuyPrices1);
	    	lowestBuyPrices2 = Math.min(lowestBuyPrices2, p - maxProfit1);
	    	maxProfit2 = Math.max(maxProfit2, p - lowestBuyPrices2);
	    }
	    return maxProfit2;
    }
}

public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length < 2) return 0;
        int n = prices.length;
        int[][] dp = new int[3][n];
	   
	    for(int i = 1; i <= 2; i++){
	        int tmpMax = -prices[0];
	        for(int j = 1; j < n; j++){
	            dp[i][j] = Math.max(dp[i][j-1], tmpMax + prices[j]);
	            //DP: t(i,j) is the max profit for up to i transactions by time j 
	            tmpMax = Math.max(tmpMax, dp[i-1][j-1] - prices[j]);
	            //tmpMax means the maximum profit of just doing at most i-1 transactions, using at most first j-1 prices, and buying the stock at price[j] - this is used for the next loop.
	        }
	    }
	    return dp[2][n-1];
    }
}

class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) {
            return 0;
        }
        int[][] dp = new int[3][prices.length];
        for(int i = 1; i <= 2; i++) {
            int tmpMax = dp[i - 1][0] - prices[0];
            for(int j = 1; j < prices.length; j++) {
                dp[i][j] = Math.max(dp[i][j - 1], prices[j] + tmpMax);
                tmpMax = Math.max(tmpMax, dp[i - 1][j] - prices[j]);
            }
        }
        return dp[2][prices.length - 1];
    }
}

public class Solution {
    public int maxProfit(int[] prices) {
        int hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;
        int release1 = 0, release2 = 0;
        for(int i:prices){                              // Assume we only have 0 money at first
            release2 = Math.max(release2, hold2+i);     // The maximum if we've just sold 2nd stock so far.
            hold2    = Math.max(hold2,    release1-i);  // The maximum if we've just buy  2nd stock so far.
            release1 = Math.max(release1, hold1+i);     // The maximum if we've just sold 1nd stock so far.
            hold1    = Math.max(hold1,    -i);          // The maximum if we've just buy  1st stock so far. 
        }
        return release2; ///Since release1 is initiated as 0, so release2 will always higher than release1.
    }
}
Why the order is reversed? Because we have to make sure that the hold2 we use in release2 comes from the last loop and the same for hold2, release1.
