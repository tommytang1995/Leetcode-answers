public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> list = new ArrayList<>();
        helper(root,list,k);
        return list.get(k-1);
    }
    
    public void helper(TreeNode root, List<Integer> list, int k){
        if(list.size()>=k){
            return ;
        }
        if(root.left!=null){
            helper(root.left,list,k);
        }
        list.add(root.val);
        if(root.right!=null){
            helper(root.right,list,k);
        }
    }
}

public class Solution {
    public int kthSmallest(TreeNode root, int k) {
       Stack<TreeNode> stack = new Stack<>();
       int count = 0;
       TreeNode cur = root;
       while(!stack.isEmpty()||cur!=null){
           while(cur!=null){
               stack.push(cur);
               cur = cur.left;
           }
           TreeNode temp = stack.pop();
           count++;
           if(count==k)return temp.val;
           cur=temp.right;
       }
       
       return 0;
    }
}

public class Solution {
    int res = 0;
    int count;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        helper(root);
        return res;
    }
    
    public void helper(TreeNode root){
        if(root.left != null) helper(root.left);
        count--;
        if(count == 0){
            res = root.val;
            return;
        }
        if(root.right != null) helper(root.right);
    }
}
