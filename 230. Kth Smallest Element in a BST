public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> list = new ArrayList<>();
        helper(root,list,k);
        return list.get(k-1);
    }
    
    public void helper(TreeNode root, List<Integer> list, int k){
        if(list.size()>=k){
            return ;
        }
        if(root.left!=null){
            helper(root.left,list,k);
        }
        list.add(root.val);
        if(root.right!=null){
            helper(root.right,list,k);
        }
    }
}

public class Solution {
    public int kthSmallest(TreeNode root, int k) {
       Stack<TreeNode> stack = new Stack<>();
       int count = 0;
       TreeNode cur = root;
       while(!stack.isEmpty()||cur!=null){
           while(cur!=null){
               stack.push(cur);
               cur = cur.left;
           }
           TreeNode temp = stack.pop();
           count++;
           if(count==k)return temp.val;
           cur=temp.right;
       }
       
       return 0;
    }
}

public class Solution {
    int res = 0;
    int count;
    public int kthSmallest(TreeNode root, int k) {
        count = k;
        helper(root);
        return res;
    }
    
    public void helper(TreeNode root){
        if(root.left != null) helper(root.left);
        count--;
        if(count == 0){
            res = root.val;
            return;
        }
        if(root.right != null) helper(root.right);
    }
}

public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int count = countNodes(root.left);
        if (k <= count) {
            return kthSmallest(root.left, k);
        } else if (k > count + 1) {
            return kthSmallest(root.right, k-1-count); // 1 is counted as current node
        }
        
        return root.val;
    }
    
    public int countNodes(TreeNode n) {
        if (n == null) return 0;
        
        return 1 + countNodes(n.left) + countNodes(n.right);
    }
}
Nice short code, but I think your code is O(n), not O(lgn), because you have to count at least half of the nodes before you get the right answer.
n-number of nodes in the tree.
