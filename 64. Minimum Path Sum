public class Solution {
    public int minPathSum(int[][] grid) {
        int[] res = new int[grid[0].length];
        for(int i = 1; i < grid[0].length; i++){
            grid[0][i] += grid[0][i-1];
        }
        
        for(int i = 1; i < grid.length; i++){
            grid[i][0] += grid[i-1][0];
        }
        
        for(int i = 0; i < res.length; i++){   //记得这一步！！！！！
            res[i] = grid[0][i];
        }
        
        for(int i = 1; i < grid.length; i++){
            res[0] = grid[i][0];    //初始化第一个元素！！！！
            for(int j = 1; j < grid[0].length; j++){
                res[j] = Math.min(res[j], res[j-1]) + grid[i][j];
            }
        }
        
        return res[grid[0].length-1];
    }
}

Time: o(n^2)
Space: o(n)

public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0){
            return -1;
        }
        for(int i = 1; i < grid.length; i++){
            grid[i][0] += grid[i - 1][0];
        }
        for(int j = 1; j < grid[0].length; j++){
            grid[0][j] += grid[0][j - 1];
        }
        for(int i = 1; i < grid.length; i++){
            for(int j = 1; j < grid[0].length; j++){
                grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
}

Time: o(n^2)
Space: o(1)

public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(i == 0 || j == 0) {
                    if(i == 0 && j == 0) {
                        continue;
                    }
                    else if(i == 0) {
                        grid[i][j] += grid[i][j - 1];
                    }
                    else if(j == 0) {
                        grid[i][j] += grid[i - 1][j];
                    }
                }
                else{
                    grid[i][j] += Math.min(grid[i][j - 1], grid[i - 1][j]);
                }
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
}
