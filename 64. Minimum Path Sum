public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid.length==0||grid[0].length==0)return 0;
        int m = grid.length;
        int n = grid[0].length;
        
        for(int i = 1 ; i < m ; i++){
            
            grid[i][0] = grid[i][0] + grid[i-1][0];
        }
        for(int j = 1 ; j < n ; j++){
            
            grid[0][j] = grid[0][j] + grid[0][j-1];
        }
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                
                grid[i][j] = grid[i][j] + Math.min(grid[i-1][j], grid[i][j-1]);
            }
        }
        
        return grid[m-1][n-1];
    }
}
动态规划：
把第一行和第一列的每一个元素都变成前面元素的和，其他元素路径最小值，是该元素加上[i][j-1]和[i-1][j]的最小值，到最后右低端的元素值就是路径最小值。
