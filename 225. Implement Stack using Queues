class MyStack {
    // Push element x onto stack.
    Queue<Integer> queue = new LinkedList<>();
    
    public void push(int x) {
        queue.offer(x);
        for(int i = 0; i < queue.size()-1; i++){
            queue.offer(queue.poll());
        }
    }

    // Removes the element on top of the stack.
    public void pop() {
        queue.poll();
    }

    // Get the top element.
    public int top() {
        return queue.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue.isEmpty();
    }
}
Time: o(n)
Space: o(n)

class MyStack {
    // Push element x onto stack.
    Queue<Integer> queue1 = new LinkedList<>();
    Queue<Integer> queue2 = new LinkedList<>();
    
    public void push(int x) {
        if(queue1.isEmpty()){
            queue1.offer(x);
            for(int i = 0; i < queue2.size(); i++){
                queue1.offer(queue2.poll());
            }
        }
        else{
            queue2.offer(x);
            for(int i = 0; i < queue1.size(); i++){
                queue2.offer(queue1.poll());
            }
        }
    }

    // Removes the element on top of the stack.
    public void pop() {
        if(queue1.isEmpty()) queue2.poll();
        else queue1.poll();
    }

    // Get the top element.
    public int top() {
        return queue1.isEmpty() ? queue2.peek() : queue1.peek();
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return queue1.isEmpty() && queue2.isEmpty();
    }
}
Time: o(n)
Space: o(n)
