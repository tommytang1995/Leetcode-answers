class LRUCache {
    Map<Integer, Integer> map;
    LinkedHashSet<Integer> set;
    int capacity;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        set = new LinkedHashSet<>();
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) {
            return -1;
        }
        set.remove(key);
        set.add(key);
        return map.get(key);
    }
    
    public void put(int key, int value) {
        if(capacity <= 0) {
            return;
        }
        if(map.containsKey(key)) {
            map.put(key, value);
            set.remove(key);
            set.add(key);
            return;
        }
        if(map.size() >= capacity) {
            int remove = set.iterator().next();
            set.remove(remove);
            map.remove(remove);
        }
        set.add(key);
        map.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
 
 class LRUCache {
    
    class Node {
        int key;
        int value;
        Node prev;
        Node next;
        
        public Node(int key, int value){
            this.key = key;
            this.value = value;
            prev = null;
            next = null;
        }
    }

    Node head = new Node(-1, -1);
    Node tail = new Node(-1, -1);
    int size;
    Map<Integer, Node> map =  new HashMap<>();;
    
    public LRUCache(int capacity) {
        size = capacity;
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) {
            return -1;
        }
        Node node = map.get(key);
        node.next.prev = node.prev;
        node.prev.next = node.next;
        moveToTail(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if(get(key) != -1) {
            map.get(key).value = value;
            return;
        }
        if(map.size() >= size) {
            map.remove(head.next.key);
            head.next = head.next.next;
            head.next.prev = head;
        }
        Node node = new Node(key, value);
        map.put(key, node);
        moveToTail(node);
    }
    
    public void moveToTail(Node node) {
        tail.prev.next = node;
        node.prev = tail.prev;
        tail.prev = node;
        node.next = tail;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
