public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null)return list;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> res = new ArrayList<>();
            for(int i = 0 ; i < size ; i++){
                TreeNode temp = queue.poll();
                if(temp.left!=null){
                    queue.offer(temp.left);
                }
                if(temp.right!=null){
                    queue.offer(temp.right);
                }
                res.add(temp.val);
            }
            list.add(res);
        }
        return list;
    }
}

public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null)return list;
        helper(list,root,0);
        return list;
    }
    
    public void helper(List<List<Integer>> list,TreeNode root,int level){
        if(root==null){
            return;
        }
        if(list.size()==level){
            list.add(new ArrayList<Integer>());
        }
        list.get(level).add(root.val);
        
        helper(list,root.left,level+1);
        helper(list,root.right,level+1);
    }
}
