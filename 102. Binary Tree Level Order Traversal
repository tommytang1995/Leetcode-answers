public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root == null) return list;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> res = new ArrayList<>();
            for(int i = 0; i < size; i++){
                TreeNode temp = queue.poll();
                res.add(temp.val);
                if(temp.left != null) queue.offer(temp.left);
                if(temp.right != null) queue.offer(temp.right);
            }
            list.add(res);
        }
        return list;
    }
}
Time: o(n)
Space: o(logn)

public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root == null) return list;
        helper(root, list, 0);
        return list;
    }
    
    public void helper(TreeNode node, List<List<Integer>> list, int level){
        if(node == null) return;
        if(list.size() == level){
            list.add(new ArrayList<>());
        }
        list.get(level).add(node.val);
        helper(node.left, list, level+1);
        helper(node.right, list, level+1);
    }
}
Time: o(n)
Space: o(logn)
