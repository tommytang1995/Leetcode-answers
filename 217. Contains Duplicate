
public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i < nums.length; i++){
           if(nums[i]==nums[i-1]){
               return true;
           }
        }
        return false;
    }
}

Time complexity: o(nlogn)
Space: o(1)

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(Integer num : nums){
            if(!map.containsKey(num)){
                map.put(num, 1);
            }
            else{
                return true;
            }
        }
        return false;
    }
}

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(Integer num : nums){
            if(!set.add(num)){
                return true;
            }
        }
        return false;
    }
}
