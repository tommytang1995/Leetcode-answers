public class Solution {
    public int countSubstrings(String s) {
        int count = s.length();
        boolean[][] dp = new boolean[s.length() + 1][s.length() + 1];
        for(int i = 1; i <= s.length(); i++){
            dp[i][i] = true;
            for(int j = i - 1; j >= 1; j--){
                if(s.charAt(j - 1) == s.charAt(i - 1)){
                    if(i - j <= 2 || dp[j + 1][i - 1]){
                        dp[j][i] = true;
                        count++;
                    }
                    else{
                        dp[j][i] = false;
                    }
                }
                else{
                    dp[j][i] = false;
                }
            }
        }
        return count;
    }
}

public class Solution {
    int count = 0;
    public int countSubstrings(String s) {
        if(s == null || s.length() == 0) return 0;
        for(int i = 0; i < s.length(); i++){
            helper(s, i, i);
            helper(s, i, i + 1);
        }
        return count;
    }
    
    public void helper(String s, int x, int y){
        while(x >= 0 && y < s.length() && s.charAt(x) == s.charAt(y)){
            x--;
            y++;
            count++;
        }
    }
}
