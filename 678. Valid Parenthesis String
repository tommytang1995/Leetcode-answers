class Solution {
    public boolean checkValidString(String s) {
        return check(s, 0, 0);
    }
    
    public boolean check(String s, int start, int count) {
        if(count < 0) {
            return false;
        }
        for(int i = start; i < s.length(); i++) {
            char ch = s.charAt(i);
            if(ch == '(') {
                count++;
            }
            else if(ch == ')') {
                count--;
                if(count < 0) {
                    return false;
                }
            }
            else {
                return check(s, i + 1, count + 1) || check(s, i + 1, count - 1) || check(s, i + 1, count);
            }
        }
        return count == 0;
    }
}

class Solution {
    public boolean checkValidString(String s) {
        Stack<Integer> left = new Stack<>();
        Stack<Integer> star = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if(ch == '(') {
                left.push(i);
            }
            else if(ch == '*') {
                star.push(i);
            }
            else {
                if(left.isEmpty() && star.isEmpty()) {
                    return false;
                }
                if(!left.isEmpty()) {
                    left.pop();
                }
                else{
                    star.pop();
                }
            }
        }
        while(!left.isEmpty() && !star.isEmpty()) {
            if(left.pop() > star.pop()) {
                return false;
            }
        }
        return left.isEmpty();
    }
}

