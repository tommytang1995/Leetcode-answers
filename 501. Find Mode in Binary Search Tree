/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    List<Integer> list = new ArrayList<>();
    int max = 0;
    Integer pre = null;
    int count = 1;
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        backtrack(root);
        int[] array = new int[list.size()];
        for(int i = 0; i < array.length; i++){
            array[i] = list.get(i);
        }
        return array;
    }
    
    public void backtrack(TreeNode root){
        if(root == null) return;
        backtrack(root.left);
        if(pre != null){
            if(root.val == pre){
                count++;
            }
            else count = 1;
        }
        if(count > max){
            list = new ArrayList<>();
            max = count;
            list.add(root.val);
        }
        else if(count == max){
            list.add(root.val);
        }
        pre = root.val;
        backtrack(root.right);
    }
}

//Just for BST(Inorder traverse)

public class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    int max = 0;
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        backtrack(root);
        List<Integer> list = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue() == max){
                list.add(entry.getKey());
            }
        }
        int[] array = new int[list.size()];
        for(int i = 0; i < array.length; i++){
            array[i] = list.get(i);
        }
        return array;
    }
    
    public void backtrack(TreeNode root){
        if(root == null) return;
        backtrack(root.left);
        map.put(root.val, map.getOrDefault(root.val, 0) + 1);
        max = Math.max(max, map.get(root.val));
        backtrack(root.right);
    }
}
//can be applied to any trees
