public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size()==0)return 0;
        int n = triangle.size();
        for(int i = n -2 ; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                int temp = Math.min(triangle.get(i+1).get(j), triangle.get(i+1).get(j+1)) + triangle.get(i).get(j);
                triangle.get(i).set(j, temp);
            }
        }
        return triangle.get(0).get(0);
    }
}
Starting from the row just before the last row, and calculate the minimum path from each node to the last row and go on like this for every
row unitl it reaches the first row. Then the result is exactly the value of the first row.
The reason why we don't start from the top to bottom is that we have to keep every result of every path and retrieve them all the time. 
Time: o(n^2)

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        return dfs(0, 0, triangle, new Integer[triangle.size()][triangle.size()]); 
    }
    
    public int dfs(int x, int y, List<List<Integer>> triangle, Integer[][] dp) {
        if(x >= triangle.size() || y >= triangle.get(x).size()) {
            return 0;
        }
        if(dp[x][y] != null) {
            return dp[x][y];
        }
        dp[x][y] = Math.min(dfs(x + 1, y, triangle, dp), dfs(x + 1, y + 1, triangle, dp)) + triangle.get(x).get(y);
        return dp[x][y];
    }
}
