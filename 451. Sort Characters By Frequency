public class Solution {  ////bucket sort
    public String frequencySort(String s) {
        int[] map = new int[128];  //character的asicII范围是32~127，这是用来标识每个字母出现的次数。
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            map[s.charAt(i)]++;
        }
        List<Character>[] list = new List[s.length()+1];
        for(int i = 0; i < 128; i++){
            if(map[i] != 0){
                if(list[map[i]] == null){
                    list[map[i]] = new ArrayList<>();
                }
                list[map[i]].add((char)i);
            }
        }
        for(int i = s.length(); i >= 0; i--){
            if(list[i] != null){
                for(Character ch : list[i]){
                    for(int j = 0; j < i; j++){
                        sb.append(ch);
                    }
                }
            }
        }
        return sb.toString();
    }
}
Time: o(n)
Space: o()unknown

public class Solution {  ////heap
    public String frequencySort(String s) {
        Map<Character, Integer> map = new HashMap<>();
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(!map.containsKey(s.charAt(i))){
                map.put(s.charAt(i),1);
            }
            else{
                map.put(s.charAt(i),map.get(s.charAt(i))+1);
            }
        }
        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>(
            new Comparator<Map.Entry<Character, Integer>>(){
                @Override
                public int compare(Map.Entry<Character, Integer> a, Map.Entry<Character, Integer> b){
                    return b.getValue() - a.getValue();
                }
            }
            );
        pq.addAll(map.entrySet());
        while(!pq.isEmpty()){
            Map.Entry<Character, Integer> entry = pq.poll();
            for(int i = 0; i < entry.getValue(); i++){
                sb.append(entry.getKey());
            }
        }
        return sb.toString();
    }
}
Time: o(nlogn)
Space: o(n)
