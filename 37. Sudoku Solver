public class Solution {
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return;
        helper(board, 0, 0);
    }
    public boolean helper(char[][] board, int i, int j){
        if(i == 9) return true;
        if(j == 9) return helper(board, i + 1, 0);
        if(board[i][j] == '.'){
            for(int k = 1; k <= 9; k++){
                board[i][j] = (char)(k + '0');
                if(isValid(board, i, j)){
                    if(helper(board, i, j + 1)) return true;
                }
            board[i][j] = '.';
        }
      }
      else{
         return helper(board, i, j + 1);
      }
      return false;
    }
    public boolean isValid(char[][] board, int i, int j){
        for(int col = 0; col < 9; col++){
            if(col != j && board[i][col] == board[i][j]) return false;
        }
        for(int row = 0; row < 9; row++){
            if(row != i && board[row][j] == board[i][j]) return false;
        }
        for(int row = i / 3 * 3; row < i / 3 * 3 + 3; row++){
            for(int col = j / 3 * 3; col < j / 3 * 3 + 3; col++){
                if((row != i || col != j) && board[row][col] == board[i][j]) return false;
            }
        }
        return true;
    }
}
