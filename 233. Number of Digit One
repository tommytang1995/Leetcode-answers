
class Solution {
    public int countDigitOne(int n) {
        int num = n;
        int base = 1;
        int res = 0;
        while(num > 0) {
            int digit = num % 10;
            num /= 10;
            res += base * num;
            if(digit == 1) {
                res += n % base + 1;
            }
            else if(digit > 1) {
                res += base;
            }
            base *= 10;
        }
        return res;
    }
}
The idea is to calculate occurrence of 1 on every digit. There are 3 scenarios, for example
if n = xyzdabc
and we are considering the occurrence of one on thousand, it should be:
(1) xyz * 1000                     if d == 0
(2) xyz * 1000 + abc + 1           if d == 1
(3) xyz * 1000 + 1000              if d > 1

For people who doesn't understand the author's explanations, just look at some examples:
Let n = 4560000
How many nums with "1" at the thousand's position?
4551000 to 4551999 (1000)
4541000 to 4541999 (1000)
4531000 to 4531999 (1000)
...
1000 to 1999 (1000)
That's 456 * 1000
What if n = 4561234?
4561000-4561234 (1234+1)
4551000 to 4551999 (1000)
4541000 to 4541999 (1000)
4531000 to 4531999 (1000)
...
1000 to 1999 (1000)
That's 456 * 1000 + 1234 + 1
What if n = 4562345?
4561000-4561999 (1000)
4551000 to 4551999 (1000)
4541000 to 4541999 (1000)
4531000 to 4531999 (1000)
...
1000 to 1999 (1000)
That's 456*1000 + 1000
