public class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] nodes = preorder.split(",");
    int diff = 1;
    for (String node: nodes) {
        if (--diff < 0) return false;
        if (!node.equals("#")) diff += 2;
    }
    return diff == 0;
    }
}

public boolean isValidSerialization_PostOrder(String postorder) {
	String[] nodes = postorder.split(",");
	int diff = 1;
	for (String node : nodes) {
		diff--;
		if (!node.equals("#")) diff += 2;
		// Post-Order traversal fail criteria
		if (diff > 0) return false;
	}
	return diff == 0;
}

public boolean isValidSerialization_InOrder(String inorder) {
	String[] nodes = inorder.split(",");
	int diff = 1;
	for (String node : nodes) {
		diff--;
		if (!node.equals("#")) diff += 2;
		// In-Order traversal fail criteria
		if (diff > 1) return false;
	}
	return diff == 0;
}

public class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] nodes = preorder.split(",");
        int leaves = 0;
        int nonleaves = 0;
        int i = 0;
        while(i < nodes.length && nonleaves + 1 != leaves){
            if(nodes[i].equals("#")){
                leaves++;
            }
            else{
                nonleaves++;
            }
            i++;
        }
        return nonleaves + 1 == leaves && i == nodes.length;
    }
}

public class Solution {
    public boolean isValidSerialization(String preorder) {
        String[] nodes = preorder.split(",");
        int degree = -1;
        for(String node : nodes){
            degree++;
            if(degree > 0) return false;
            if(!node.equals("#")) degree-=2;
        }
        return degree == 0;
    }
}
