 public class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int res = nums[0];
        int minSofar = res;
        int maxSofar = res;
        int minPre = res;
        int maxPre = res;
        
        for(int i = 1; i < nums.length; i++){
            maxSofar = Math.max(Math.max(minPre*nums[i],maxPre*nums[i]), nums[i]);
            minSofar = Math.min(Math.min(minPre*nums[i],maxPre*nums[i]), nums[i]);
            res = Math.max(res,maxSofar);
            minPre = minSofar;
            maxPre = maxSofar;
        }
        
        return res;
    }
}

public class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length == 0){
            return 0;
        }
        int res = nums[0];
        int minSofar = res;
        int maxSofar = res;
        
        for(int i = 1; i < nums.length; i++){
            if(nums[i] >= 0){
                maxSofar = Math.max(nums[i]*maxSofar,nums[i]);
                minSofar = Math.min(nums[i]*minSofar,nums[i]);
            }
            else{
                int temp = maxSofar;  //作用跟上一个解法中设置的minPre和maxPre一样，为了避免错误迭代
                maxSofar = Math.max(nums[i]*minSofar,nums[i]);
                minSofar = Math.min(nums[i]*temp,nums[i]);
            }
            res = Math.max(res, maxSofar);
        }
        
        return res;
    }
}

Time: o(n)
Space: o(1)
