public class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        int cur = depth(root.left) + depth(root.right);
        int left = diameterOfBinaryTree(root.left);
        int right = diameterOfBinaryTree(root.right);
        return Math.max(cur, Math.max(left, right));
    }
    
    public int depth(TreeNode root){
        if(root == null) return 0;
        if(root.left == null && root.right == null) return 1;
        return 1 + Math.max(depth(root.left), depth(root.right));
    }
}

//For every node, length of longest path which pass it = MaxDepth of its left subtree + MaxDepth of its right subtree.
public class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        maxDepth(root);
        return max;
    }
    
    public int maxDepth(TreeNode root){
        if(root == null) return 0;
        int left = maxDepth(root.left);
        int right = maxDepth(root.right);
        max = Math.max(max, left + right);
        return Math.max(left, right) + 1;
    }
}
