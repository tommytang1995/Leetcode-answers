public class Solution {
    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
        long[] lengths = new long[]{length(p1, p2), length(p1, p3), length(p1, p4), length(p2, p3), length(p2, p4), length(p3, p4)};
        long maxLength = Integer.MIN_VALUE;
        long sideLength = 0;
        for(long length : lengths){
            maxLength = Math.max(maxLength, length);
        }
        int maxCount = 0;
        for(long length : lengths){
            if(length == maxLength) maxCount++;
            else sideLength = length;
        }
        if(maxCount != 2) return false;
        for(long length : lengths){
            if(length != maxLength && length != sideLength) return false;
        }
        return true;
    }
    
    public long length(int[] p1, int[] p2){
        return (long)Math.pow(p1[0] - p2[0], 2) + (long)Math.pow(p1[1] - p2[1], 2);
    }
}
