class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[] left = new int[n];
        int[] right = new int[n];
        int[] height = new int[n];
        Arrays.fill(left, 0);
        Arrays.fill(right, n);
        Arrays.fill(height, 0);
        int res = 0;
        for(int i = 0; i < m; i++) {
            int cur_left = 0;
            int cur_right = n;
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] == '0') height[j] = 0;
                else height[j]++;
            }
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] == '1') {
                    left[j] = Math.max(left[j], cur_left);
                }
                else {
                    left[j] = 0;
                    cur_left = j + 1;
                }
            }
            for(int j = n - 1; j >= 0; j--) {
                if(matrix[i][j] == '1') {
                    right[j] = Math.min(right[j], cur_right);
                }
                else {
                    right[j] = n;
                    cur_right = j;
                }
            }
            for(int j = 0; j < n; j++) {
                res = Math.max(res, height[j] * (right[j] - left[j]));
            }
        }
        return res;
    }
}
https://discuss.leetcode.com/topic/6650/share-my-dp-solution/2
