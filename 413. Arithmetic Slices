
sum += curr really does the trick. Brilliant!

I think the easy way to understand this is that adding current number to our existing arithmetic sequence, we will have curr additional 
combinations of new arithmetic slices.

Let's say if we have [1, 2, 3, 4] and currently we have 3 arithmetic slices (curr is 2). We are going to add 5 to our arithmetic sequence. 
So that we will have curr new slices (curr is 3), which is [3, 4, 5], [2, 3, 4, 5] and [1, 2, 3, 4, 5]. Now, the total valid arithmetic
slices is 3 + curr = 6. That's exactly the same as sum += curr.

public class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if(A.length<3)return 0;
        int sum = 0;
        int count = 0;
        for(int i = 2; i < A.length; i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2]){
                count++;
                sum+=count;
            }
            else{
                count=0;
            }
        }
        return sum;
    }
}

123
1234 234
12345 2345 345

this is why cur++
