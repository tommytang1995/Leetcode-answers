public class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> list = new ArrayList<>();
        int[] inDegree = new int[numCourses];
        for(int i = 0; i < numCourses; i++){
            list.add(new ArrayList<>());
        }
        for(int[] pair : prerequisites){
            list.get(pair[1]).add(pair[0]);
            inDegree[pair[0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < numCourses; i++){
            if(inDegree[i] == 0) queue.offer(i);
        }
        while(!queue.isEmpty()){
            int temp = queue.poll();
            for(int j : list.get(temp)){
                inDegree[j]--;
                if(inDegree[j] == 0) queue.offer(j);
            }
        }
        for(int i = 0; i < numCourses; i++){
            if(inDegree[i] != 0) return false;
        }
        return true;
    }
}
