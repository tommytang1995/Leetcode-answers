public class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n<=0)return new ArrayList<TreeNode>();
        return helper(1,n);
    }
    public List<TreeNode> helper(int start, int end){
        List<TreeNode> tree = new ArrayList<>();
        if(start > end){
            tree.add(null);
        }
        for(int i = start; i <= end; i++){
            List<TreeNode> leftChild = helper(start, i - 1);  //以i为root的左节点
            List<TreeNode> rightChild = helper(i + 1, end);
            for(TreeNode left : leftChild){   //左节点的所有组合方式
                for(TreeNode right : rightChild){    //右节点的所有组合方式，将两者组合起来，是相乘的关系
                    TreeNode root = new TreeNode(i);   //创建根节点
                    root.left = left;
                    root.right = right;
                    tree.add(root);  //添加一种树的组合方式
                }
            }
        }
        return tree;
    }
}
T(n) = 2*(T(n-1) + T(n-2) + ... + T(1) + T(0)), T(n) should equal to O(2^n)
Space: o(logn)
