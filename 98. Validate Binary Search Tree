/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null)return true;
        return helper(root,null,null);
    }
    
    public boolean helper(TreeNode root, Integer min, Integer max){
        if(root==null)return true;
        if(min!=null&&root.val<=min){
            return false;
        }
        if(max!=null&&root.val>=max){
            return false;
        }
        return helper(root.left,min,root.val)&&helper(root.right,root.val,max);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root==null)return true;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode pre = null;
        while(!stack.isEmpty()||root!=null){
            while(root!=null){
                stack.push(root);
                root=root.left;
            }
            TreeNode temp = stack.pop();
            if(pre!=null&&pre.val>=temp.val)return false;
            pre=temp;
            root=temp.right;
        }
        return true;
    }
}
