
public class Solution {
    public int[] nextGreaterElement(int[] findNums, int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        Stack<Integer> stack = new Stack<>();
        for(int num : nums){
            while(!stack.isEmpty() && stack.peek() < num){
                int pop = stack.pop();
                map.put(pop, num);
            }
            stack.push(num);
        }
        int[] res = new int[findNums.length];
        for(int i = 0; i < findNums.length; i++){
            res[i] = map.containsKey(findNums[i]) ? map.get(findNums[i]) : -1;
        }
        return res;
    }
}

Suppose we have a decreasing sequence followed by a greater number
For example [5, 4, 3, 2, 1, 6] then the greater number 6 is the next greater element for all previous numbers in the sequence
We use a stack to keep a decreasing sub-sequence, whenever we see a number x greater than stack.peek() we pop all elements less than x and for all the popped ones, their next greater element is x
For example [9, 8, 7, 3, 2, 1, 6]
The stack will first contain [9, 8, 7, 3, 2, 1] and then we see 6 which is greater than 1 so we pop 1 2 3 whose next greater element should be 6
