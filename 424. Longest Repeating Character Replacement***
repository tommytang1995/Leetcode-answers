public class Solution {
    public int characterReplacement(String s, int k) {
        int[] letters = new int[26];
        int start = 0;
        int maxCount = 0;
        int res = 0;
        for(int end = 0; end < s.length(); end++){
            maxCount = Math.max(maxCount, ++letters[s.charAt(end) - 'A']); //running max count. The greater the count is, the more likely k will satisfy the condition.
            while(end - start + 1 - maxCount > k){ //the left: number of characters that are needed to be replaced.
                letters[s.charAt(start) - 'A']--;
                start++;
            }
            res = Math.max(res, end - start + 1);
        }
        return res;
    }
}

class Solution {
    public int characterReplacement(String s, int k) {
        int start = 0;
        int maxRepeat = 0;
        int res = 0;
        int[] letters = new int[26];
        for(int i = 0; i < s.length(); i++) {
            maxRepeat = Math.max(maxRepeat, ++letters[s.charAt(i) - 'A']);
            //guess final result will only depend on maxcount, thus, count smaller than maxcount wont make a difference to the final result
            //I think since maxLength == maxCount+k so finding maxLength basically is the same as finding maxCount.
//Under this sense finding maxLength is basically equal to finding maxCount,we don't have decrease maxCount when start++.
            while(i - start + 1 - maxRepeat > k) {
                letters[s.charAt(start) - 'A']--;
                start++;
            }
            res = Math.max(res, i - start + 1);
        }
        return res;
    }
}
