class Solution {
    public boolean isAdditiveNumber(String num) {
        int len = num.length();
        for(int i = 1; i <= (len - 1) / 2; i++) {
            if(num.charAt(0) == '0' && i > 1) break;
            for(int j = i + 1; len - j >= Math.max(i, j - i); j++) {
                if(num.charAt(i) == '0' && j > i + 1) break;
                long num1 = Long.valueOf(num.substring(0, i));
                long num2 = Long.valueOf(num.substring(i, j));
                String str = num.substring(j);
                if(isAdditive(str, num1, num2)) return true;
            }
        }
        return false;
    }
    
    public boolean isAdditive(String num, long num1, long num2) {
        if(num.equals("")) return true;
        long sum = num1 + num2;
        String str = String.valueOf(sum);
        if(!num.startsWith(str)) return false;
        return isAdditive(num.substring(str.length()), num2, sum);
    }
}

class Solution {
    public boolean isAdditiveNumber(String num) {
        if (num == null || num.length() < 3) {
            return false;
        }
        return helper(num, 0, -1, -1, -1);
    }
    
    public boolean helper(String num, int start, long prev1, long prev2, long prev3) {
        if (start == num.length()) {
            if (prev1 == -1 || prev2 == -1 || prev3 == -1) {
                return false;
            }
            return prev1 + prev2 == prev3;
        }
        if (num.charAt(start) == '0') {
            return helper(num, start + 1, prev2, prev3, 0);
        }
        boolean ans = false;
        for (int i = start + 1; i <= num.length() && i - start <= 10; i++) {
            long curr = Long.parseLong(num.substring(start, i));
            if (prev2 == -1 || prev3 == -1 || prev2 + prev3 == curr) {
                ans |= helper(num, i, prev2, prev3, curr);
            } else if (prev2 + prev3 < curr) {
                break;
            }
        }
        return ans;
    }
}
