public class Solution {
    int m = 0;
    int n = 0;
  public void solve(char[][] board) {
      if(board==null||board.length==0||board[0].length==0) return;
      m = board.length;
      n = board[0].length;
	  if(m<2||n<2)return;
	  
	  for(int i = 0 ; i < m ; i++){
	      if(board[i][0]=='O'){
	          dfs(board,i,0);
	      }
	      if(board[i][n-1]=='O'){
	          dfs(board,i,n-1);
	      }
	  }
	  
	  for(int j = 0 ; j < n ; j++){
	      if(board[0][j]=='O'){
	          dfs(board,0,j);
	      }
	      if(board[m-1][j]=='O'){
	          dfs(board,m-1,j);
	      }
	  }
	  
	  for(int i = 0 ; i < m ; i++){
	      for(int j = 0 ; j < n ; j++){
	          if(board[i][j]=='O'){
	              board[i][j]='X';
	          }
	          else if(board[i][j]=='*'){
	              board[i][j]='O';
	          }
	      }
	  }
  }
  
  public void dfs(char[][] board, int i, int j){
      if(i<0||i>m-1||j<0||j>n-1){
          return;
      }
      if(board[i][j]=='O'){
          board[i][j]='*';
      }
      if(i+1<m-1&&board[i+1][j]=='O'){  //不要检查四个边界了，如果检查的话，会导致stackoverflow
          dfs(board,i+1,j);
      }
      if(i-1>0&&board[i-1][j]=='O'){
          dfs(board,i-1,j);
      }
      if(j+1<n-1&&board[i][j+1]=='O'){
          dfs(board,i,j+1);
      }
      if(j-1>0&&board[i][j-1]=='O'){
          dfs(board,i,j-1);
      }
  }
}
