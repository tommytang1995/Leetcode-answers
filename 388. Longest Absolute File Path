
public class Solution {
    public int lengthLongestPath(String input) {
        Map<Integer, Integer> map = new HashMap<>();
        int count = 0;
        map.put(0,0);
        String[] array = input.split("\n");
        for(String str : array){
            int level = str.lastIndexOf("\t") + 1;
            int len = str.substring(level).length();
            if(str.contains(".")){
                count = Math.max(count, map.get(level) + len);
            }
            else{
                map.put(level+1, map.get(level)+len+1);
            }
        }
        return count;
    }
}

创建一个level数组，每一层level中储存的是，该level为止路径的长度
public class Solution {
    public int lengthLongestPath(String input) {
        int[] levArray = new int[input.length()+1];
        int count = 0;
        String[] array = input.split("\n");  
        for(String str : array){
            int level = str.lastIndexOf("\t") + 1;  //注意，\n和\t都是长度为1的character！！！！
            int len = str.substring(level).length();
            if(str.contains(".")){
                count = Math.max(count, levArray[level] + len);
            }
            else{
                levArray[level+1] = levArray[level] + len + 1;
            }
        }
        return count;
    }
}                           //用数组比用map快得多
